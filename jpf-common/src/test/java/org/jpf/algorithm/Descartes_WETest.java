/*
 * This file was automatically generated by         wupf
 * Thu Nov 28 10:58:18 GMT 2019
 */

package org.jpf.algorithm;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.util.ArrayList;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.UnaryOperator;

import org.junit.Test;

public class Descartes_WETest {

	@Test(timeout = 1000)
	public void testCreatesDescartesAndRunAndRunWithZeroAndRunWithEmptyListAndRunWithEmptyList0() throws Throwable {
		Descartes descartes0 = new Descartes();
		LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
		Stack<String> stack0 = new Stack<String>();
		Stack<List<String>> stack1 = new Stack<List<String>>();
		linkedList0.addAll((Collection<? extends List<String>>) stack1);
		descartes0.run(linkedList0, stack0, 0, "7yhCBT@)Xslgoo9:@u", 0);
		assertEquals("[]", stack0.toString());
	}

	@Test(timeout = 1000)
	public void testRunWithZeroAndRunWithNonEmptyListAndRunWithNonEmptyList() throws Throwable {
		Descartes descartes0 = new Descartes();
		ArrayList<List<String>> arrayList0 = new ArrayList<List<String>>();
		Vector<String> vector0 = new Vector<String>();
		arrayList0.add((List<String>) vector0);
		arrayList0.add((List<String>) vector0);
		descartes0.run(arrayList0, vector0, 0, ",)#OT", 0);
		descartes0.run(arrayList0, vector0, 0, ",)#OT", 0);
		descartes0.run(arrayList0, vector0, 260, "com.google.common.base.Predicates$ObjectPredicate", 0);
		ArrayList<String> arrayList1 = new ArrayList<String>();
		descartes0.run(arrayList0, arrayList1, 16, "com.google.common.base.Predicates$ObjectPredicate", 0);
		descartes0.run(arrayList0, arrayList1, 9970, "", (-42));
		assertTrue(arrayList1.isEmpty());
	}



	@Test(timeout = 1000)
	public void testRunWithZeroAndRunWithEmptyListAndRunWithPositive() throws Throwable {
		Descartes descartes0 = new Descartes();
		ArrayList<List<String>> arrayList0 = new ArrayList<List<String>>();
		Vector<String> vector0 = new Vector<String>();
		descartes0.run(arrayList0, vector0, 0, "", 0);
		descartes0.run(arrayList0, vector0, 977, "org.jpf.algorithm.Descartes", 0);
		descartes0.run(arrayList0, vector0, 0, "", 908);
		descartes0.run(arrayList0, vector0, 0, "", (-2028));
		descartes0.run(arrayList0, vector0, 977, "org.jpf.algorithm.Descartes", (-1261));
		assertFalse(vector0.contains(""));
	}

	@Test(timeout = 1000)
	public void testCreatesDescartesAndRunAndRunWithNegative() throws Throwable {
		Descartes descartes0 = new Descartes();
		Vector<List<String>> vector0 = new Vector<List<String>>();
		TreeSet<Locale.LanguageRange> treeSet0 = new TreeSet<Locale.LanguageRange>();
		LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>(treeSet0);
		Stack<String> stack0 = new Stack<String>();
		List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) stack0);
		descartes0.run(vector0, list0, (-5463), "", (-1345));
		assertTrue(vector0.isEmpty());
	}

	@Test(timeout = 1000)
	public void testRunThrowsArrayIndexOutOfBoundsException() throws Throwable {
		Descartes descartes0 = new Descartes();
		Stack<List<String>> stack0 = new Stack<List<String>>();
		Stack<Locale.LanguageRange> stack1 = new Stack<Locale.LanguageRange>();
		Locale locale0 = Locale.TAIWAN;
		Set<String> set0 = locale0.getUnicodeLocaleKeys();
		Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
		List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) stack1, (Collection<String>) set0,
				locale_FilteringMode0);
		// Undeclared exception!
		try {
			descartes0.run(stack0, list0, (-4707), ".class)", 8232);
			fail("Expecting exception: ArrayIndexOutOfBoundsException");

		} catch (ArrayIndexOutOfBoundsException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testRunWithNull() throws Throwable {
		Descartes descartes0 = new Descartes();
		LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
		Vector<String> vector0 = new Vector<String>();
		descartes0.run(linkedList0, vector0, 0, (String) null, 2854);
		assertEquals(0, linkedList0.size());
	}

	@Test
	public void testRunThrowsTooManyResourcesException() throws Throwable {
		Descartes descartes0 = new Descartes();
		ArrayList<List<String>> arrayList0 = new ArrayList<List<String>>();
		Vector<String> vector0 = new Vector<String>();
		String string0 = "h";
		vector0.add("h");
		arrayList0.add((List<String>) vector0);
		arrayList0.add((List<String>) vector0);
		descartes0.run(arrayList0, vector0, 0, ",)#OT", 0);
		descartes0.run(arrayList0, vector0, 0, ",)#OT", 0);
		descartes0.run(arrayList0, vector0, 260, "com.google.common.base.Predicates$ObjectPredicate", 0);
		// Undeclared exception!
		descartes0.run(arrayList0, vector0, 0, "h", 260);
	}

	@Test(timeout = 1000)
	public void testCreatesDescartesAndRunAndRunWithZeroAndRunWithPositive() throws Throwable {
		Descartes descartes0 = new Descartes();
		ArrayList<List<String>> arrayList0 = new ArrayList<List<String>>();
		ArrayList<String> arrayList1 = new ArrayList<String>();
		descartes0.run(arrayList0, arrayList1, 0, "", 1327);
		ArrayList<String> arrayList2 = new ArrayList<String>();
		arrayList0.add((List<String>) arrayList2);
		descartes0.run(arrayList0, arrayList2, 0, "loadExceptionCount", 0);
		descartes0.run(arrayList0, arrayList1, (-1387), "", (-98));
		LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
		descartes0.run(linkedList0, arrayList2, (-4724), "loadExceptionCount", (-4724));
		assertEquals(1, arrayList2.size());
		assertFalse(arrayList2.equals((Object) arrayList1));
	}


	@Test(timeout = 5000)
	public void testCreatesDescartesAndRunAndRunWithZeroAndRunWithPositiveAndRunWithEmptyList() throws Throwable {
		Descartes descartes0 = new Descartes();
		Vector<List<String>> vector0 = new Vector<List<String>>();
		Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
		TreeSet<String> treeSet0 = new TreeSet<String>();
		List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) treeSet0);
		int int0 = 65536;
		int int1 = 0;
		ArrayList<String> arrayList0 = new ArrayList<String>(65536);
		vector0.add((List<String>) arrayList0);
		String string0 = "TSRW!I]";
		int int2 = (-1839);
		descartes0.run(vector0, list0, 0, "TSRW!I]", (-1839));
		descartes0.run(vector0, list0, 65536, "org.jpf.algorithm.Descartes", 65536);
		treeSet0.add("}");
		descartes0.run(vector0, list0, 65536, "}", 0);
		descartes0.run(vector0, list0, 0, "}", 0);
		int int3 = 0;
		descartes0.run(vector0, list0, 0, "org.jpf.algorithm.Descartes", 0);
		String string1 = "NH:ZkiN";
		vector0.add(list0);
		descartes0.run(vector0, list0, 0, "NH:ZkiN", 0);
		int int4 = 0;
		// Undeclared exception!
		descartes0.run(vector0, list0, 0, "org.jpf.algorithm.Descartes", 65536);
	}

	@Test(timeout = 4000)
	public void testCreatesDescartesAndRunAndRunWithZeroAndRunWithPositiveAndRunWithNegative() throws Throwable {
		Descartes descartes0 = new Descartes();
		ArrayList<List<String>> arrayList0 = new ArrayList<List<String>>();
		Stack<String> stack0 = new Stack<String>();
		arrayList0.add((List<String>) stack0);
		descartes0.run(arrayList0, stack0, 0, "com.google.common.primitives.Floats$FloatConverter", 1755);
		descartes0.run(arrayList0, stack0, 0, "The strings must not be null", 0);
		descartes0.run(arrayList0, stack0, 0, "The strings must not be null", 0);
		Stack<String> stack1 = new Stack<String>();
		descartes0.run(arrayList0, stack1, 0, "", 3330);
		stack1.add("");
		descartes0.run(arrayList0, stack1, 0, "The strings must not be null", 0);
		stack1.add("");
		descartes0.run(arrayList0, stack1, 0, "", 0);
		descartes0.run(arrayList0, stack0, (-504), "", (-504));
		arrayList0.add((List<String>) stack1);
		// Undeclared exception!
		descartes0.run(arrayList0, stack0, 0, "The strings must not be null", 461845907);
	}

	@Test(timeout = 1000)
	public void testRunThrowsConcurrentModificationException() throws Throwable {
		Descartes descartes0 = new Descartes();
		ArrayList<List<String>> arrayList0 = new ArrayList<List<String>>();
		ArrayList<String> arrayList1 = new ArrayList<String>();
		int int0 = 0;
		List<String> list0 = arrayList1.subList(0, 0);
		UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
		arrayList1.add("");
		String string0 = "Lm";
		UnaryOperator.identity();
		unaryOperator0.apply("Lm");
		arrayList1.replaceAll(unaryOperator0);
		// Undeclared exception!
		try {
			descartes0.run(arrayList0, list0, 0, "", 8202);
			fail("Expecting exception: ConcurrentModificationException");

		} catch (ConcurrentModificationException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}
}
