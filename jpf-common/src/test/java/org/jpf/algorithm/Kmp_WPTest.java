/*
 * This file was automatically generated by wupf@
 * Thu Nov 28 10:57:22 GMT 2019
 */

package org.jpf.algorithm;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

import org.junit.Test;

public class Kmp_WPTest {


	@Test(timeout = 1000)
	public void testKMP_IndexReturningNegative() throws Throwable {
		char[] charArray0 = new char[8];
		charArray0[0] = 'k';
		char[] charArray1 = new char[1];
		int int0 = new Kmp().KMP_Index(charArray1, charArray0);
		assertEquals((-1), int0);
	}

	@Test(timeout = 1000)
	public void testKMP_IndexThrowsArrayIndexOutOfBoundsException() throws Throwable {
		char[] charArray0 = new char[0];
		// Undeclared exception!
		try {
			new Kmp().KMP_Index(charArray0, charArray0);
			fail("Expecting exception: ArrayIndexOutOfBoundsException");

		} catch (ArrayIndexOutOfBoundsException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testKMP_IndexThrowsNullPointerException() throws Throwable {
		char[] charArray0 = new char[0];
		// Undeclared exception!
		try {
			new Kmp().KMP_Index(charArray0, (char[]) null);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testNextThrowsArrayIndexOutOfBoundsException() throws Throwable {
		char[] charArray0 = new char[0];
		// Undeclared exception!
		try {
			new Kmp().next(charArray0);
			fail("Expecting exception: ArrayIndexOutOfBoundsException");

		} catch (ArrayIndexOutOfBoundsException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testNextThrowsNullPointerException() throws Throwable {
		// Undeclared exception!
		try {
			new Kmp().next((char[]) null);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testKMP_IndexReturningPositive() throws Throwable {
		char[] charArray0 = new char[8];
		charArray0[0] = 'k';
		char[] charArray1 = new char[1];
		int int0 = new Kmp().KMP_Index(charArray0, charArray1);
		assertEquals(1, int0);
	}
}
