/*
 * This file was automatically generated by wupf@
 * Thu Nov 28 11:19:39 GMT 2019
 */

package org.jpf.utils;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotEquals;
import static org.junit.Assert.fail;

import org.junit.Test;

public class JpfDoubleUtil_WETest {

	@Test(timeout = 1000)
	public void testAddTaking3ArgumentsReturningPositive() throws Throwable {
		Double double0 = new Double(3905);
		Double double1 = JpfDoubleUtil.add(double0, double0, 3905);
		assertEquals(7810.0, (double) double1, 0.01);
	}

	@Test(timeout = 1000)
	public void testGetIntNum() throws Throwable {
		Double double0 = new Double((-1.0));
		int int0 = JpfDoubleUtil.getIntNum(double0);
		assertEquals(1, int0);
	}

	@Test(timeout = 1000)
	public void testGetPercentWithPositive() throws Throwable {
		String string0 = JpfDoubleUtil.getPercent(3905, 3905);
		assertEquals("0.00", string0);
	}

	@Test(timeout = 1000)
	public void testToDecimalStringTaking1And1ThrowsTooManyResourcesException() throws Throwable {
		JpfDoubleUtil.toDecimalString("0.00", 3905);
		Double double0 = new Double(3905);
		JpfDoubleUtil.toDecimalString(double0, 3905);
		// Undeclared exception!
		JpfDoubleUtil.toDecimalString("0.00", 3905);
	}

	@Test(timeout = 1000)
	public void testToDecimalStringTaking1And1ReturningEmptyString() throws Throwable {
		String string0 = JpfDoubleUtil.toDecimalString((String) null, 1);
		assertEquals("", string0);
	}

	@Test(timeout = 1000)
	public void testToDecimalStringTaking1And1WithNull() throws Throwable {
		String string0 = JpfDoubleUtil.toDecimalString((Double) null, (-751));
		assertEquals("0.00", string0);
	}

	@Test(timeout = 1000)
	public void testToSplitDecimalStringTaking1And1ReturningNonEmptyString() throws Throwable {
		String string0 = JpfDoubleUtil.toSplitDecimalString("0.00", 3906);
		assertEquals(
				".0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
				string0);
	}

	@Test(timeout = 1000)
	public void testToSplitDecimalStringTaking1And1ReturningEmptyString() throws Throwable {
		String string0 = JpfDoubleUtil.toSplitDecimalString((Double) null, (-751));
		assertEquals("", string0);
	}

	@Test(timeout = 1000)
	public void testToSplitDecimalStringTaking1And1WithNullAndNegative() throws Throwable {
		String string0 = JpfDoubleUtil.toSplitDecimalString((String) null, (-834));
		assertEquals("", string0);
	}

	@Test(timeout = 1000)
	public void testToSplitDecimalStringTaking1And1WithEmptyString() throws Throwable {
		String string0 = JpfDoubleUtil.toSplitDecimalString("", 0);
		assertEquals("", string0);
	}

	@Test(timeout = 1000)
	public void testDivTaking3ArgumentsThrowsIllegalArgumentException() throws Throwable {
		Double double0 = new Double((-4015.7686295));
		// Undeclared exception!
		try {
			JpfDoubleUtil.div(double0, double0, (-1672));
			fail("Expecting exception: IllegalArgumentException");

		} catch (IllegalArgumentException e) {
			//
			// The scale must be a positive integer or zero
			//
		}
	}

	@Test(timeout = 1000)
	public void testRoundReturningPositive() throws Throwable {
		double double0 = JpfDoubleUtil.round(3905, 3905);
		assertEquals(3905.0, double0, 0.01);
	}

	@Test(timeout = 1000)
	public void testRoundThrowsIllegalArgumentException() throws Throwable {
		// Undeclared exception!
		try {
			JpfDoubleUtil.round(0, (-2152));
			fail("Expecting exception: IllegalArgumentException");

		} catch (IllegalArgumentException e) {
			//
			// The scale must be a positive integer or zero
			//
		}
	}

	@Test(timeout = 1000)
	public void testGetPercentWithZero() throws Throwable {
		String string0 = JpfDoubleUtil.getPercent(3906, 0);
		assertEquals("0.00", string0);
	}

	@Test(timeout = 1000)
	public void testChangeDecimalReturningPositive() throws Throwable {
		double double0 = JpfDoubleUtil.changeDecimal(1, 0);
		assertEquals(1.0, double0, 0.01);
	}

	@Test(timeout = 1000)
	public void testDivTaking2IntsReturningPositive() throws Throwable {
		Double double0 = JpfDoubleUtil.div((-35), (-35));
		assertEquals(1.0, (double) double0, 0.01);

		Double double1 = new Double((-35));
		Double double2 = JpfDoubleUtil.div(double1, double0, 3631);
		assertEquals((-35.0), (double) double2, 0.01);
	}

	@Test(timeout = 1000)
	public void testSubTaking2ArgumentsReturningZero() throws Throwable {
		Double double0 = new Double((-1.0));
		Double double1 = JpfDoubleUtil.sub(double0, double0);
		assertNotEquals((double) double1, (double) double0, 0.01);
	}

	@Test(timeout = 1000)
	public void testToDecimalStringTaking1And1WithNegative() throws Throwable {
		Double double0 = new Double((-1.0));
		String string0 = JpfDoubleUtil.toDecimalString(double0, 1);
		assertEquals("-1.0", string0);
	}

	@Test(timeout = 1000)
	public void testToSplitDecimalStringTaking1And1() throws Throwable {
		Double double0 = new Double((-1.0));
		String string0 = JpfDoubleUtil.toSplitDecimalString(double0, (-2152));
		assertEquals("-1.", string0);
	}

	@Test(timeout = 1000)
	public void testToSplitDecimalStringTaking1And1WithPositive() throws Throwable {
		Double double0 = new Double((-869.435));
		String string0 = JpfDoubleUtil.toSplitDecimalString(double0, 690);
		assertEquals(
				"-869.4350000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
				string0);
	}

	@Test(timeout = 1000)
	public void testAddTaking2ArgumentsThrowsNullPointerException() throws Throwable {
		Double double0 = new Double((-230.0));
		// Undeclared exception!
		try {
			JpfDoubleUtil.add((Double) null, double0);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testAddTaking3ArgumentsThrowsNullPointerException() throws Throwable {
		// Undeclared exception!
		try {
			JpfDoubleUtil.add((Double) null, (Double) null, 4);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testDivTaking2IntsThrowsArithmeticException() throws Throwable {
		// Undeclared exception!
		try {
			JpfDoubleUtil.div(1821, 0);
			fail("Expecting exception: ArithmeticException");

		} catch (ArithmeticException e) {
			//
			// / by zero
			//
		}
	}

	@Test(timeout = 1000)
	public void testDivTaking2DoublesThrowsArithmeticException() throws Throwable {
		Double double0 = new Double(0.0);
		// Undeclared exception!
		try {
			JpfDoubleUtil.div(double0, double0);
			fail("Expecting exception: ArithmeticException");

		} catch (ArithmeticException e) {
			//
			// / by zero
			//
		}
	}

	@Test(timeout = 1000)
	public void testDivTaking2DoublesThrowsNullPointerException() throws Throwable {
		Double double0 = new Double(0.0);
		// Undeclared exception!
		try {
			JpfDoubleUtil.div((Double) null, double0);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testDivTaking3ArgumentsThrowsArithmeticException() throws Throwable {
		Double double0 = new Double(0.0);
		// Undeclared exception!
		try {
			JpfDoubleUtil.div(double0, double0, 2671);
			fail("Expecting exception: ArithmeticException");

		} catch (ArithmeticException e) {
			//
			// BigInteger divide by zero
			//
		}
	}

	@Test(timeout = 1000)
	public void testDivTaking3ArgumentsThrowsNullPointerException() throws Throwable {
		Double double0 = new Double((-1.0));
		// Undeclared exception!
		try {
			JpfDoubleUtil.div((Double) null, double0, 985);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testGetIntNumThrowsIllegalArgumentException() throws Throwable {
		// Undeclared exception!
		try {
			JpfDoubleUtil.getIntNum((Double) null);
			fail("Expecting exception: IllegalArgumentException");

		} catch (IllegalArgumentException e) {
			//
			// Cannot format given Object as a Number
			//
		}
	}

	@Test(timeout = 1000)
	public void testMulTaking2ArgumentsThrowsNullPointerException() throws Throwable {
		// Undeclared exception!
		try {
			JpfDoubleUtil.mul((Double) null, (Double) null);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testMulTaking3ArgumentsThrowsNullPointerException() throws Throwable {
		Double double0 = new Double((-378.3503033));
		// Undeclared exception!
		try {
			JpfDoubleUtil.mul((Double) null, double0, (-1));
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testSubTaking2ArgumentsThrowsNullPointerException() throws Throwable {
		Double double0 = new Double((-2902.127807645));
		// Undeclared exception!
		try {
			JpfDoubleUtil.sub(double0, (Double) null);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testSubTaking3ArgumentsThrowsNullPointerException() throws Throwable {
		Double double0 = new Double(0.0);
		// Undeclared exception!
		try {
			JpfDoubleUtil.sub((Double) null, double0, 10);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testToDecimalStringTaking1And1ThrowsNumberFormatException() throws Throwable {
		// Undeclared exception!
		try {
			JpfDoubleUtil.toDecimalString("", 1);
			fail("Expecting exception: NumberFormatException");

		} catch (NumberFormatException e) {
		}
	}

	@Test(timeout = 1000)
	public void testToSplitDecimalStringTaking1And1ThrowsNumberFormatException() throws Throwable {
		// Undeclared exception!
		try {
			JpfDoubleUtil.toSplitDecimalString("b2B", 0);
			fail("Expecting exception: NumberFormatException");

		} catch (NumberFormatException e) {
		}
	}

	@Test(timeout = 1000)
	public void testAddTaking2ArgumentsReturningPositive() throws Throwable {
		Double double0 = new Double(1287.0);
		Double double1 = JpfDoubleUtil.add(double0, double0);
		assertEquals(2574.0, (double) double1, 0.01);
	}

	@Test(timeout = 1000)
	public void testDivTaking2IntsReturningNegative() throws Throwable {
		Double double0 = JpfDoubleUtil.div(2290, (-51));
		assertEquals((-44.9019607843), (double) double0, 0.01);
	}

	@Test(timeout = 1000)
	public void testDivTaking2DoublesReturningZero() throws Throwable {
		Double double0 = new Double(0.0);
		Double double1 = new Double((-1.0));
		Double double2 = JpfDoubleUtil.div(double0, double1);
		assertEquals(0.0, (double) double2, 0.01);
	}

	@Test(timeout = 1000)
	public void testDivTaking3ArgumentsReturningZero() throws Throwable {
		Double double0 = new Double(0.0);
		Double double1 = new Double(3329.9712);
		Double double2 = JpfDoubleUtil.div(double0, double1, 0);
		assertEquals(0.0, (double) double2, 0.01);
	}

	@Test(timeout = 1000)
	public void testMulTaking2ArgumentsReturningNegative() throws Throwable {
		Double double0 = new Double(0);
		Double double1 = new Double(1.0);
		Double double2 = JpfDoubleUtil.sub(double0, double1, 300);
		Double double3 = JpfDoubleUtil.mul(double2, double1);
		assertEquals((-1.0), (double) double3, 0.01);
	}

	@Test(timeout = 1000)
	public void testMulTaking2ArgumentsReturningZero() throws Throwable {
		Double double0 = new Double(0.0);
		Double double1 = JpfDoubleUtil.mul(double0, double0);
		assertEquals(0.0, (double) double1, 0.01);
	}

	@Test(timeout = 1000)
	public void testMulTaking3ArgumentsReturningPositive() throws Throwable {
		Double double0 = new Double((-1));
		Double double1 = JpfDoubleUtil.mul(double0, double0, 0);
		assertEquals(1.0, (double) double1, 0.01);
	}

	@Test(timeout = 1000)
	public void testScale2ReturningPositive() throws Throwable {
		double double0 = JpfDoubleUtil.scale(2959.0);
		assertEquals(2959.0, double0, 0.01);
	}

	@Test(timeout = 1000)
	public void testSubTaking3ArgumentsReturningPositive() throws Throwable {
		Double double0 = new Double(0.0);
		Double double1 = new Double(4263.413);
		Double double2 = JpfDoubleUtil.sub(double1, double0, 679);
		assertEquals(4263.413, (double) double2, 0.01);
	}

	@Test(timeout = 1000)
	public void testToDecimalStringTaking1And1() throws Throwable {
		Double double0 = new Double(1216.0);
		String string0 = JpfDoubleUtil.toDecimalString(double0, (-2011));
		assertEquals("1216.", string0);
	}

}
