/*
 * This file was automatically generated by         wupf
 * Thu Nov 28 11:59:05 GMT 2019
 */

package org.jpf.utils;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.util.Collection;
import java.util.Map;

import org.junit.Test;

public class JpfValidateUtil_WPTest {

	@Test(timeout = 1000)
	public void testIsFloatThrowsNoClassDefFoundError() throws Throwable {
		boolean boolean0 = JpfValidateUtil.isFloat("uICy9y04");
		assertFalse(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsNotPhoneThrowsNoClassDefFoundError() throws Throwable {
		boolean boolean0 = JpfValidateUtil.isNotPhone("l9");
		assertTrue(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsArmyIdCardThrowsNoClassDefFoundError() throws Throwable {
		boolean boolean0 = JpfValidateUtil.isArmyIdCard(
				"\u00AD\u0600\u061C\u06DD\u070F\u08E2\u1680\u180E\u2000\u2028\u205F\u2066\u3000\uD8003p9\uFFF9");
		assertFalse(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsNumberThrowsNoClassDefFoundError() throws Throwable {
		boolean boolean0 = JpfValidateUtil.isNumber("US");
		assertFalse(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsZipCodeThrowsNoClassDefFoundError() throws Throwable {
		// Undeclared exception!
		try {
			JpfValidateUtil.isZipCode("[}CUG,)eW~aHuq@iw");

		} catch (IllegalArgumentException e) {
		}
	}

	@Test(timeout = 1000)
	public void testIsNotNegativeFloatThrowsNoClassDefFoundError() throws Throwable {
		boolean boolean0 = JpfValidateUtil.isNotNegativeFloat("j,{)Dp0J");
		assertTrue(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsDateThrowsNoClassDefFoundError() throws Throwable {
		boolean boolean0 = JpfValidateUtil.isDate("null");
		assertFalse(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsPositiveIntegerThrowsNoClassDefFoundError() throws Throwable {
		boolean boolean0 = JpfValidateUtil.isPositiveInteger("rs@I7?O)m~");
		assertFalse(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsChineseThrowsNoClassDefFoundError() throws Throwable {
		boolean boolean0 = JpfValidateUtil.isChinese("");
		assertFalse(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsUrlThrowsNoClassDefFoundError() throws Throwable {
		boolean boolean0 = JpfValidateUtil.isUrl("\bjoin\b");
		assertFalse(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsPasswordThrowsNoClassDefFoundError() throws Throwable {
		boolean boolean0 = JpfValidateUtil.isPassword("");
		assertFalse(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsNonnegativeIntegerThrowsNoClassDefFoundError() throws Throwable {
		boolean boolean0 = JpfValidateUtil.isNonnegativeInteger("v,&D0w9t/'q,h(:Z");
		assertFalse(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsValidTakingStringArrayReturningFalse() throws Throwable {
		String[] stringArray0 = new String[8];
		stringArray0[0] = "\bjoin\b";
		boolean boolean0 = JpfValidateUtil.isValid(stringArray0);
		assertFalse(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsValidTakingStringArrayReturningTrue() throws Throwable {
		String[] stringArray0 = new String[0];
		boolean boolean0 = JpfValidateUtil.isValid(stringArray0);
		assertTrue(boolean0);
	}


	@Test(timeout = 1000)
	public void testIsPhoneThrowsNoClassDefFoundError() throws Throwable {
		boolean boolean0 = JpfValidateUtil.isPhone(
				"^(http|https|ftp)://([a-zA-Z0-9.-]+(:[a-zA-Z0-9.&%$-]+)*@)?((25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]).(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0).(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0).(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])|([a-zA-Z0-9-]+.)*[a-zA-Z0-9-]+.[a-zA-Z]{2,4})(:[0-9]+)?(/[^/][a-zA-Z0-9.,?'\\/+&%$#=~_-@]*)*$");
		assertFalse(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsPositiveFloatThrowsNoClassDefFoundError() throws Throwable {
		boolean boolean0 = JpfValidateUtil.isPositiveFloat("\"USZ-N;`]4x|5~je~^");
		assertFalse(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsContainsForbiddenCharacterThrowsNoClassDefFoundError() throws Throwable {
		boolean boolean0 = JpfValidateUtil.isContainsForbiddenCharacter("!B1J");
		assertFalse(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsNotChineseThrowsNoClassDefFoundError() throws Throwable {
		boolean boolean0 = JpfValidateUtil.isNotChinese("");
		assertTrue(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsNotDateThrowsNoClassDefFoundError() throws Throwable {
		boolean boolean0 = JpfValidateUtil.isNotDate("");
		assertTrue(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsNotDomainThrowsNoClassDefFoundError() throws Throwable {
		boolean boolean0 = JpfValidateUtil.isNotDomain((String) null);
		assertTrue(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsNotIdCardThrowsNoClassDefFoundError() throws Throwable {
		JpfValidateUtil.isNotIdCard("U~h_5f|");
	}

	@Test(timeout = 1000)
	public void testIsNotIntOrFloatThrowsNoClassDefFoundError() throws Throwable {
		JpfValidateUtil.isNotIntOrFloat("");
	}

	@Test(timeout = 1000)
	public void testIsNotTelephoneThrowsNoClassDefFoundError() throws Throwable {
		JpfValidateUtil.isNotTelephone((String) null);
	}

	@Test(timeout = 1000)
	public void testIsUuidThrowsNoClassDefFoundError() throws Throwable {
		JpfValidateUtil.isUuid((String) null);
	}

	@Test(timeout = 1000)
	public void testIsValidTakingStringArrayThrowsNullPointerException() throws Throwable {
		// Undeclared exception!
		try {
			JpfValidateUtil.isValid((String[]) null);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testIsValidTakingCollectionArrayThrowsNullPointerException() throws Throwable {
		// Undeclared exception!
		try {
			JpfValidateUtil.isValid((Collection[]) null);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testIsValidTakingMapArrayThrowsNullPointerException() throws Throwable {
		// Undeclared exception!
		try {
			JpfValidateUtil.isValid((Map[]) null);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

}
