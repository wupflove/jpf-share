/*
 * This file was automatically generated by wupf@
 * Thu Nov 28 11:21:01 GMT 2019
 */

package org.jpf.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import org.jpf.utils.JpfDoubleUtil;

public class JpfDoubleUtil_WPTest {

	@Test(timeout = 1000)
	public void testToDecimalStringTaking1And1ReturningNonEmptyString() throws Throwable {
		String string0 = JpfDoubleUtil.toDecimalString("0.00", 0);
		assertEquals("0.", string0);
	}

	@Test(timeout = 1000)
	public void testAddTaking2ArgumentsThrowsNullPointerException() throws Throwable {
		Double double0 = new Double(0.0);
		// Undeclared exception!
		try {
			JpfDoubleUtil.add((Double) null, double0);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testAddTaking3ArgumentsThrowsNullPointerException() throws Throwable {
		Double double0 = Double.valueOf(0.0);
		// Undeclared exception!
		try {
			JpfDoubleUtil.add((Double) null, double0, 4);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testDivTaking2DoublesThrowsNullPointerException() throws Throwable {
		// Undeclared exception!
		try {
			JpfDoubleUtil.div((Double) null, (Double) null);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testDivTaking3ArgumentsThrowsNullPointerException() throws Throwable {
		Double double0 = new Double(2);
		// Undeclared exception!
		try {
			JpfDoubleUtil.div(double0, (Double) null, 0);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testMulTaking2ArgumentsThrowsNullPointerException() throws Throwable {
		Double double0 = new Double(0);
		// Undeclared exception!
		try {
			JpfDoubleUtil.mul(double0, (Double) null);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testMulTaking3ArgumentsThrowsNullPointerException() throws Throwable {
		Double double0 = new Double(0.0);
		// Undeclared exception!
		try {
			JpfDoubleUtil.mul((Double) null, double0, (-957));
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testToDecimalStringTaking1And1ThrowsNumberFormatException() throws Throwable {
		// Undeclared exception!
		try {
			JpfDoubleUtil.toDecimalString("", (-1));
			fail("Expecting exception: NumberFormatException");

		} catch (NumberFormatException e) {
		}
	}

	@Test(timeout = 1000)
	public void testToSplitDecimalStringTaking1And1ThrowsNumberFormatException() throws Throwable {
		// Undeclared exception!
		try {
			JpfDoubleUtil.toSplitDecimalString("iPU,yL!G4O:", 2448);
			fail("Expecting exception: NumberFormatException");

		} catch (NumberFormatException e) {
		}
	}

	@Test(timeout = 1000)
	public void testSubTaking2ArgumentsReturningPositive() throws Throwable {
		Double double0 = JpfDoubleUtil.div((-4619), (-4619));
		Double double1 = new Double((-4620.0));
		Double double2 = JpfDoubleUtil.sub(double0, double1);
		assertEquals(4621.0, (double) double2, 0.01);
	}

	@Test(timeout = 1000)
	public void testDivTaking2IntsReturningZeroAndSubTaking3ArgumentsReturningPositive() throws Throwable {
		Double double0 = JpfDoubleUtil.div(4, 151);
		assertEquals(0.0264900662, (double) double0, 0.01);

		Double double1 = JpfDoubleUtil.div(0, (-2052));
		Double double2 = JpfDoubleUtil.sub(double0, double1, 151);
		assertEquals(0.0264900662, (double) double2, 0.01);
	}

	@Test(timeout = 1000)
	public void testToSplitDecimalStringTaking1And1WithPositiveAndNegative() throws Throwable {
		Double double0 = JpfDoubleUtil.div((-4619), (-4619));
		assertEquals(1.0, (double) double0, 0.01);

		String string0 = JpfDoubleUtil.toSplitDecimalString(double0, (-1399));
		assertEquals("1.", string0);
	}

}
