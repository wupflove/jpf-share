/*
 * This file was automatically generated by wupf@
 * Thu Nov 28 11:40:07 GMT 2019
 */

package org.jpf.utils.ios;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.mockito.Mockito;

import net.sf.jftp.net.BasicConnection;
import net.sf.jftp.net.FilesystemConnection;
import net.sf.jftp.net.FtpConnection;

public class FtpUpload_WETest {
	@Rule
	public ExpectedException wupf_thrown = ExpectedException.none();
	
	@Test(timeout = 1000)
	public void testConnectionFailed() throws Throwable {
		FtpUpload ftpUpload0 = new FtpUpload("", 0, "", "");
		FilesystemConnection filesystemConnection0 = new FilesystemConnection("", ftpUpload0);
		ftpUpload0.connectionFailed(filesystemConnection0, "");
		assertEquals("", filesystemConnection0.getLocalPath());
	}

	@Test(timeout = 1000)
	public void testConnectionInitialized() throws Throwable {
		FtpUpload ftpUpload0 = new FtpUpload("", 430, "=]eOU*]*.p(+#lMkX]", "connection failed!");
		FtpConnection ftpConnection0 = new FtpConnection("=]eOU*]*.p(+#lMkX]", 0, ")4KwnPG0Z", "=]eOU*]*.p(+#lMkX]");
		ftpUpload0.connectionInitialized(ftpConnection0);
		assertTrue(ftpConnection0.work);
	}

	@Test(timeout = 1000)
	public void testActionFinished() throws Throwable {
		FtpUpload ftpUpload0 = new FtpUpload("O:Gp&l#", 3, "", "O:Gp&l#");
		FtpConnection ftpConnection0 = new FtpConnection("spawning new thread for this upload.", (-2300), "O:Gp&l#");
		ftpUpload0.actionFinished(ftpConnection0);
		assertEquals("spawning new thread for this upload.", ftpConnection0.getHost());
	}

	@Test(timeout = 1000)
	public void testMain() throws Throwable {
		wupf_thrown.expect(org.junit.runners.model.TestTimedOutException.class);
		FtpUpload g = new FtpUpload("192.168.1.10", 2019, "test", "test");
		g.upload("/", "C:/test.jpg");
	}

	@Test(timeout = 1000)
	public void testCreatesFtpUploadTaking3Arguments() throws Throwable {
		FtpUpload ftpUpload0 = new FtpUpload("new path is: ", "a8F_JwA!", "_SGw^");
	}

	@Test(timeout = 1000)
	public void testUpdateProgress() throws Throwable {
		FtpUpload ftpUpload0 = new FtpUpload("", 0, "", "");
		ftpUpload0.updateProgress("", "", 0L);
	}

	@Test(timeout = 1000)
	public void testUpdateRemoteDirectory() throws Throwable {
		FtpUpload ftpUpload0 = new FtpUpload("O:Gp&l#", 3, "", "O:Gp&l#");
		FilesystemConnection filesystemConnection0 = new FilesystemConnection("L'YOY6BSmY)]pz}Q", ftpUpload0);
		ftpUpload0.updateRemoteDirectory(filesystemConnection0);
		assertEquals(128000, FilesystemConnection.filesystemBuffer);
	}
	
	@Test(timeout = 1000)
	public void testCreatesFtpUploadTaking4Arguments() throws Throwable {
		FtpUpload ftpUpload0 = new FtpUpload("C:t&st.j", 466, "C:t&st.j", "C:t&st.j");
	}
	

	/**
	* Run the connectionInitialized method test.
	*
	* @throws Exception
	* 
	* @generatedBy wupf 
	* @2019-11-28 19:38:29
	* @see public  void connectionInitialized(BasicConnection con)   
	*/
	@Test(timeout = 1000)
	public void test_connectionInitialized_R34() throws Throwable {

		BasicConnection con = Mockito.mock(BasicConnection.class);

		String cc_host = "abc123";
		String cc_user = null;
		String cc_passwd = "";
		FtpUpload wupf_fixture = new FtpUpload(cc_host, cc_user, cc_passwd);

		wupf_fixture.connectionInitialized(con);

		//add check point here, sample: assertEquals(true,          wupf_result);

	}

	/**
	* Run the updateProgress method test.
	*
	* @throws Exception
	* 
	* @generatedBy wupf 
	* @2019-11-28 19:38:29
	* @see public  void updateProgress(String file,String type,long bytes)   
	*/
	@Test(timeout = 1000)
	public void test_updateProgress_R35() throws Throwable {

		String file = "abc123";
		String type = "abc123";
		long bytes = Long.MAX_VALUE;

		String cc_host = "abc123";
		String cc_user = null;
		String cc_passwd = "";
		FtpUpload wupf_fixture = new FtpUpload(cc_host, cc_user, cc_passwd);

		wupf_fixture.updateProgress(file, type, bytes);

		//add check point here, sample: assertEquals(true,          wupf_result);

	}

	/**
	* Run the connectionFailed method test.
	*
	* @throws Exception
	* 
	* @generatedBy wupf 
	* @2019-11-28 19:38:29
	* @see public  void connectionFailed(BasicConnection con,String why)   
	*/
	@Test(timeout = 1000)
	public void test_connectionFailed_R47() throws Throwable {

		BasicConnection con = Mockito.mock(BasicConnection.class);
		String why = "abc123";

		String cc_host = "abc123";
		String cc_user = null;
		String cc_passwd = "";
		FtpUpload wupf_fixture = new FtpUpload(cc_host, cc_user, cc_passwd);

		wupf_fixture.connectionFailed(con, why);

		//add check point here, sample: assertEquals(true,          wupf_result);

	}
}
