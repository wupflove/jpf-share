/*
 * This file was automatically generated by         wupf
 * Thu Nov 28 11:44:25 GMT 2019
 */

package org.jpf.utils.ios;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.fail;

import org.junit.Test;

import com.alibaba.fastjson.JSON;

public class JpfFtp_WETest {

	@Test(timeout = 1000)
	public void testDownFileWithNonEmptyStringAndNonEmptyString() throws Throwable {
		String string0 = "";
		String string1 = " ";
		String string2 = "org.apache.logging.log4j.core.layout.MarkerPatternSelector";
		// Undeclared exception!
		try {
			new JpfFtp().downFile("", (-4722), "m:m}<1AVqNvrG", " ",
					"org.apache.logging.log4j.core.layout.MarkerPatternSelector", " ",
					"org.apache.logging.log4j.core.layout.MarkerPatternSelector", true);
			fail("Expecting exception: IllegalArgumentException");

		} catch (IllegalArgumentException e) {
			//
			// port out of range:-4722
			//
		}
	}

	@Test(timeout = 1000)
	public void testDownFileWithEmptyString_2() throws Throwable {
		// Undeclared exception!
		try {
			new JpfFtp().downFile("zRwA=HKoxrX-f", (-1933), "2", "", "}%_umS ", "", "", false);

		} catch (IllegalArgumentException e) {
			//
			// port out of range:-1933
			//
		}
	}
	@Test(timeout = 1000)
	public void testDownFileReturningFalse() throws Throwable {
		boolean boolean0 = new JpfFtp().downFile((String) null, 2, "EYU>", "EYU>", "EYU>", (String) null, "4kGkdK_QAOMY`",
				false);
		assertFalse(boolean0);
	}

	@Test(timeout = 1000)
	public void testDownFileWithEmptyString() throws Throwable {
		JpfFtp jpfFtp0 = new JpfFtp();
		String string0 = "}";
		String string1 = "";
		// Undeclared exception!
		try {
			new JpfFtp().downFile("}", (-1097), "}", "", "", "", "", true);

		} catch (IllegalArgumentException e) {
			//
			// port out of range:-1097
			//
		}
	}

	@Test(timeout = 1000)
	public void testUploadFileReturningFalse() throws Throwable {
		String string0 = "'nc10(";
		int int0 = 0;
		new JpfFtp().downFile("'nc10(", 0, "NXhOa0", "'nc10(", "'nc10(", "", "", true);
		String string1 = "";
		new JpfFtp().uploadFile("", 0, "NXhOa0", "Cannot use both follow and direct on ConsoleAppender", "NXhOa0", "",
				"'nc10(");
		String string2 = "";
		new JpfFtp().uploadFile("", 0, "", "Cannot use both follow and direct on ConsoleAppender", "", "",
				"Cannot use both follow and direct on ConsoleAppender");
		new JpfFtp().uploadFile("'nc10(", (-2143), "d|{}H%5:1H;4:|sKs32", "", "", "",
				"org.apache.logging.log4j.util.PropertyFilePropertySource");

		// Undeclared exception!
		try {
			new JpfFtp().downFile("", (-1395), "close ftp", "", "", "NXhOa0", "close ftp", true);
			fail("Expecting exception: IllegalArgumentException");

		} catch (IllegalArgumentException e) {
			//
			// port out of range:-1395
			//
		}
	}
	
	/**
	* Run the uploadFile method test.
	*
	* @throws Exception
	* 
	* @generatedBy wupf 
	* @2020-05-07 10:23:30
	* @see public static  boolean uploadFile(String url,int port,String username,String password,String path,String filename,String localFileName)   
	*/
	@Test(timeout = 3000)
	public void test_uploadFile_R0() throws Throwable {

		String url = "abc123";
		int port = Integer.MAX_VALUE;
		String username = "abc123";
		String password = "abc123";
		String path = "abc123";
		String filename = "abc123";
		String localFileName = "abc123";

		boolean wupf_result = new JpfFtp().uploadFile(url, port, username, password, path, filename, localFileName);

		System.out.println(" wupf_check:uploadFile:" + JSON.toJSONString(wupf_result));
		assertNotNull(JSON.toJSONString(wupf_result));
		assertEquals(false, wupf_result);

	}
}
