/*
 * This file was automatically generated by         wupf
 * Thu Nov 28 11:52:55 GMT 2019
 */

package org.jpf.utils;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.sql.Timestamp;
import java.text.ParseException;
import java.time.Instant;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.temporal.ChronoUnit;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;

import org.junit.Test;

public class JpfDateTimeUtil_WETest {

	@Test(timeout = 1000)
	public void testFormatTaking1And1ReturningEmptyString() throws Throwable {
		String string0 = "load%u<ccessCount";
		long long0 = JpfDateTimeUtil.MILLISECONDS_IN_HOUR;
		Timestamp timestamp0 = JpfDateTimeUtil.getDateByString("78E0%");
		timestamp0.getTime();
		timestamp0.toLocalDateTime();
		JpfDateTimeUtil.format(timestamp0, "");
		JpfDateTimeUtil.getWholeYearDate(timestamp0);
		// Undeclared exception!
		try {
			JpfDateTimeUtil.getDateOf((-1077), (-1077), (-1077));
			fail("Expecting exception: IllegalArgumentException");

		} catch (IllegalArgumentException e) {
			//
			// Invalid second (must be >= 0 and <= 59).
			//
		}
	}

	@Test(timeout = 1000)
	public void testGetDateOfTaking6ArgumentsWithPositive() throws Throwable {
		int int0 = 0;
		int int1 = 511;
		// Undeclared exception!
		try {
			JpfDateTimeUtil.getDateOf(0, 0, 0, 511, 0, 511);
			fail("Expecting exception: IllegalArgumentException");

		} catch (IllegalArgumentException e) {
			//
			// Invalid day of month.
			//
		}
	}

	@Test(timeout = 1000)
	public void testGetDateByStringWithEmptyString() throws Throwable {
		JpfDateTimeUtil.getCurrentMonthDays((-1L));
		JpfDateTimeUtil.getDateWithWeekAndTime(6401L);
		JpfDateTimeUtil.getDateWithWeekAndTime(3600L);
		Date date0 = JpfDateTimeUtil.addOrMinusYear((-3864L), 0);
		JpfDateTimeUtil.getDateLastTime(date0);
		Timestamp timestamp0 = JpfDateTimeUtil.getDateByString("");
		timestamp0.toLocalDateTime();
		JpfDateTimeUtil.getTimestampByYYYYMMDDHHMMSS("1970\u5E7401\u670801\u65E5 \u5468\u56DB 00:00",
				"1970\u5E7401\u670801\u65E5 \u5468\u56DB 00:00");
		JpfDateTimeUtil.getCurrDate();
		JpfDateTimeUtil.getLastNMonths(511);
		JpfDateTimeUtil.getTime("1970\u5E7401\u670801\u65E5 \u5468\u56DB 00:00",
				"1970\u5E7401\u670801\u65E5 \u5468\u56DB 00:00");
		Locale locale0 = new Locale("1970\u5E7401\u670801\u65E5 \u5468\u56DB 00:00", "",
				"1970\u5E7401\u670801\u65E5 \u5468\u56DB 00:00");
		JpfDateTimeUtil.long2Str(31, "1970\u5E7401\u670801\u65E5 \u5468\u56DB 00:00", locale0);
		JpfDateTimeUtil.addSecond(timestamp0, 511);
		JpfDateTimeUtil.getNowTime();
		// Undeclared exception!
		try {
			JpfDateTimeUtil.validateDayOfWeek(0);
			fail("Expecting exception: IllegalArgumentException");

		} catch (IllegalArgumentException e) {
			//
			// Invalid day of week.
			//
		}
	}

	@Test(timeout = 1000)
	public void testFormatDateTimeToDateThrowsNullPointerException() throws Throwable {
		Date date0 = null;
		JpfDateTimeUtil.getDateFirstTime((Date) null);
		// Undeclared exception!
		try {
			JpfDateTimeUtil.formatDateTimeToDate((Date) null);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testGetCurrentDayWithZero() throws Throwable {
		Date date0 = JpfDateTimeUtil.addOrMinusYear(781L, (-5));
		Timestamp timestamp0 = JpfDateTimeUtil.getNextMonthFirstDay(date0, 0);
		JpfDateTimeUtil.DateAddMonth(timestamp0, 925);
		int int0 = 268;
		JpfDateTimeUtil.getYYYY_MM_DD_HH_MM_SS(date0);
		JpfDateTimeUtil.create0H0M0STime();
		JpfDateTimeUtil.setToFirstDayOfNextMonth(1543L);
		JpfDateTimeUtil.getCurrentDay(0);
		SimpleTimeZone simpleTimeZone0 = null;
		try {
			simpleTimeZone0 = new SimpleTimeZone(0, "s21L", 0, (-5), 268, (-757), (-357), (-5), (-63), 0, (-1775));
			fail("Expecting exception: IllegalArgumentException");

		} catch (IllegalArgumentException e) {
			//
			// Illegal start time -757
			//
		}
	}

	@Test(timeout = 1000)
	public void testDateAddMonthTaking2ArgumentsThrowsNullPointerException() throws Throwable {
		long long0 = 0L;
		JpfDateTimeUtil.setToFirstDayOfCurrentYear(0L);
		Timestamp timestamp0 = null;
		int int0 = (-12);
		// Undeclared exception!
		try {
			JpfDateTimeUtil.DateAddMonth((Timestamp) null, (-12));
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}


	@Test(timeout = 1000)
	public void testGetDateThrowsParseException() throws Throwable {
		JpfDateTimeUtil.isToday(977L);
		JpfDateTimeUtil.getYearMonth((Timestamp) null);
		JpfDateTimeUtil.setToFirstDayOfCurrentMonth(977L);
		Date date0 = JpfDateTimeUtil.getWholeSecondDate((Date) null);
		JpfDateTimeUtil.getBillMonthDate((Date) null, (Date) null);
		JpfDateTimeUtil.getStringTimestamp((Timestamp) null, "");
		JpfDateTimeUtil.getRBossQryStartDate("@/^#g4");
		JpfDateTimeUtil.getDateLastTime((Date) null);
		JpfDateTimeUtil.addHours(date0, 100);
		JpfDateTimeUtil.longToBillDate(1L);
		JpfDateTimeUtil.addOrMinusHours(652L, 509);
		try {
			JpfDateTimeUtil.getDate("@/^#g4", "");
			fail("Expecting exception: ParseException");

		} catch (ParseException e) {
			//
			// Unparseable date: \"@/^#g4\"
			//
		}
	}

	@Test(timeout = 1000)
	public void testGetLastMonthDateRtnDateThrowsNullPointerException() throws Throwable {
		long long0 = 0L;
		Timestamp timestamp0 = new Timestamp(0L);
		// Undeclared exception!
		try {
			JpfDateTimeUtil.getLastMonthDateRtnDate((String) null);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testAddSqlDateThrowsParseException() throws Throwable {
		Date date0 = null;
		JpfDateTimeUtil.getFormattedDateUtil((Date) null, "@yOovvp8JhK<!uV/C");
		JpfDateTimeUtil.getCurrentHour();
		JpfDateTimeUtil.getDateFirstTime((Date) null);
		JpfDateTimeUtil.getTodayYM();
		int int0 = (-4803);
		try {
			JpfDateTimeUtil.addSqlDate("", (-4803));
			fail("Expecting exception: ParseException");

		} catch (ParseException e) {
			//
			// Unparseable date: \"\"
			//
		}
	}

	@Test(timeout = 1000)
	public void testGetDateWithNull() throws Throwable {
		String string0 = null;
		// Undeclared exception!
		try {
			JpfDateTimeUtil.getDate((String) null, (String) null);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testAddMonthReturningTimestampWhereGetNanosIsPositive() throws Throwable {
		Timestamp timestamp0 = new Timestamp(1000L);
		timestamp0.setTime(1000L);
		long long0 = (-1902L);
		timestamp0.setTime((-1902L));
		Timestamp timestamp1 = JpfDateTimeUtil.addMonth(timestamp0, (-2909));
		// Undeclared exception!
		try {
			timestamp1.setNanos((-2909));
			fail("Expecting exception: IllegalArgumentException");

		} catch (IllegalArgumentException e) {
			//
			// nanos > 999999999 or < 0
			//
		}
	}

	@Test(timeout = 1000)
	public void testGetFirstDayOfNextQuarterWithZero() throws Throwable {
		JpfDateTimeUtil.getFirstDayOfNextQuarter(0L);
		Date date0 = JpfDateTimeUtil.getAddSecondWholeDate((Date) null, 0);
		int int0 = 2687;
		Date date1 = JpfDateTimeUtil.addMinutes(date0, 2687);
		JpfDateTimeUtil.getNextDay(date1);
		Timestamp timestamp0 = JpfDateTimeUtil.getLastDayThisMonth();
		Timestamp timestamp1 = JpfDateTimeUtil.DateAddMonth(timestamp0, (-411));
		timestamp1.toInstant();
		String string0 = "";
		// Undeclared exception!
		try {
			ChronoUnit.valueOf("");
			fail("Expecting exception: IllegalArgumentException");

		} catch (IllegalArgumentException e) {
			//
			// No enum constant java.time.temporal.ChronoUnit.
			//
		}
	}

	@Test(timeout = 1000)
	public void testLong2StrTaking3ArgumentsThrowsIllegalArgumentException() throws Throwable {
		JpfDateTimeUtil.getDayOfWeek(86400000L);
		JpfDateTimeUtil.getSixAddOneMonthTime();
		Date date0 = null;
		JpfDateTimeUtil.getYYYY_MM_DD_HH_MM_SS((Date) null);
		String string0 = "The wildcard must not be null";
		Locale locale0 = Locale.ENGLISH;
		locale0.getScript();
		locale0.getUnicodeLocaleKeys();
		// Undeclared exception!
		try {
			JpfDateTimeUtil.long2Str(2462L, "The wildcard must not be null", locale0);
			fail("Expecting exception: IllegalArgumentException");

		} catch (IllegalArgumentException e) {
			//
			// Illegal pattern character 'T'
			//
		}
	}



	@Test(timeout = 1000)
	public void testGetTodayTakingStringThrowsIllegalArgumentException() throws Throwable {
		JpfDateTimeUtil.getYesterday();
		// Undeclared exception!
		try {
			JpfDateTimeUtil.getToday("hb:R[v");
			fail("Expecting exception: IllegalArgumentException");

		} catch (IllegalArgumentException e) {
			//
			// Illegal pattern character 'b'
			//
		}
	}

	@Test(timeout = 1000)
	public void testNowTimeStamp() throws Throwable {
		Timestamp timestamp0 = JpfDateTimeUtil.nowTimeStamp();
		timestamp0.setTime((-1363L));
		timestamp0.toLocalDateTime();
		// Undeclared exception!
		try {
			Timestamp.valueOf(",2v)7X");
			fail("Expecting exception: IllegalArgumentException");

		} catch (IllegalArgumentException e) {
			//
			// Timestamp format must be yyyy-mm-dd hh:mm:ss[.fffffffff]
			//
		}
	}

	@Test(timeout = 1000)
	public void testAddOrMinusWeek() throws Throwable {
		Date date0 = JpfDateTimeUtil.addOrMinusWeek(0L, 31);
		assertNotEquals("Thu Aug 06 00:00:00 GMT 1970", date0.toString());
	}


	@Test(timeout = 1000)
	public void testGetHHMMSSSecondThrowsNumberFormatException() throws Throwable {
		try {
			JpfDateTimeUtil.getHHMMSSSecond("");
			fail("Expecting exception: NumberFormatException");

		} catch (NumberFormatException e) {
			//
			// For input string: \"\"
			//
		}
	}


	@Test(timeout = 1000)
	public void testGetNow() throws Throwable {
		JpfDateTimeUtil.getNow();
		String string0 = "";
		// Undeclared exception!
		try {
			Timestamp.valueOf("");
			fail("Expecting exception: IllegalArgumentException");

		} catch (IllegalArgumentException e) {
			//
			// Timestamp format must be yyyy-mm-dd hh:mm:ss[.fffffffff]
			//
		}
	}

	@Test(timeout = 1000)
	public void testGetSpecifiedDayAfterThrowsIllegalArgumentException() throws Throwable {
		// Undeclared exception!
		try {
			JpfDateTimeUtil.getSpecifiedDayAfter("Ue", "The size must be non-negative");
			fail("Expecting exception: IllegalArgumentException");

		} catch (IllegalArgumentException e) {
			//
			// Illegal pattern character 'T'
			//
		}
	}

	@Test(timeout = 1000)
	public void testGetWholeMinuteDate() throws Throwable {
		Timestamp timestamp0 = JpfDateTimeUtil.getLastHour((Date) null);
		Date date0 = JpfDateTimeUtil.getWholeMinuteDate(timestamp0);
		assertNotEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
	}

	@Test(timeout = 1000)
	public void testValidateDayOfWeekThrowsIllegalArgumentException() throws Throwable {
		// Undeclared exception!
		try {
			JpfDateTimeUtil.validateDayOfWeek(0);
			fail("Expecting exception: IllegalArgumentException");

		} catch (IllegalArgumentException e) {
			//
			// Invalid day of week.
			//
		}
	}

	@Test(timeout = 1000)
	public void testGetTimeThrowsIllegalArgumentException() throws Throwable {
		// Undeclared exception!
		try {
			JpfDateTimeUtil.getTime("org.apache.logging.log4j.util.PropertiesPropertySource",
					"org.apache.logging.log4j.util.PropertiesPropertySource");
			fail("Expecting exception: IllegalArgumentException");

		} catch (IllegalArgumentException e) {
			//
			// Illegal pattern character 'o'
			//
		}
	}

	@Test(timeout = 1000)
	public void testValidateMinuteThrowsIllegalArgumentException() throws Throwable {
		long long0 = JpfDateTimeUtil.setToFirstDayOfNextMonth(3600L);
		assertEquals(2649600000L, long0);

		// Undeclared exception!
		try {
			JpfDateTimeUtil.validateMinute((-1661));
			fail("Expecting exception: IllegalArgumentException");

		} catch (IllegalArgumentException e) {
			//
			// Invalid minute (must be >= 0 and <= 59).
			//
		}
	}

	@Test(timeout = 1000)
	public void testGetNextMonthDateThrowsNumberFormatException() throws Throwable {
		// Undeclared exception!
		try {
			JpfDateTimeUtil.getNextMonthDate("u;ouaInrDla+");
			fail("Expecting exception: NumberFormatException");

		} catch (NumberFormatException e) {
			//
			// For input string: \"u;o\"
			//
		}
	}

	@Test(timeout = 1000)
	public void testDateAddMonthTaking3ArgumentsThrowsNullPointerException() throws Throwable {
		int int0 = Integer.MAX_VALUE;
		// Undeclared exception!
		try {
			JpfDateTimeUtil.DateAddMonth((Timestamp) null, Integer.MAX_VALUE, 3313);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testGetDateBeforeMonthsThrowsNullPointerException() throws Throwable {
		String string0 = null;
		// Undeclared exception!
		try {
			JpfDateTimeUtil.getDateBeforeMonths(2424, (String) null);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testBetweenSecondThrowsNullPointerException() throws Throwable {
		Timestamp timestamp0 = JpfDateTimeUtil.getTimestampFromStr("");
		assertNull(timestamp0);

		// Undeclared exception!
		try {
			JpfDateTimeUtil.betweenSecond((Date) null, (Date) null);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testAddMonthsTaking1And1ThrowsNullPointerException() throws Throwable {
		long long0 = 0L;
		boolean boolean0 = JpfDateTimeUtil.isCurrentYear(0L);
		assertFalse(boolean0);

		Date date0 = null;
		int int0 = 50;
		// Undeclared exception!
		try {
			JpfDateTimeUtil.addMonths((Date) null, 50);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testAddMinutesThrowsNullPointerException() throws Throwable {
		String string0 = JpfDateTimeUtil.getSixAddOneMonthTime();
		assertNotNull(string0);
		assertNotEquals("2014-02-14 23:59:59", string0);

		Date date0 = JpfDateTimeUtil.parseDate("The list of prefixes must not be null", "FmL");
		assertNull(date0);

		int int0 = 0;
		// Undeclared exception!
		try {
			JpfDateTimeUtil.addMinutes((Date) null, 0);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testGetTimestampThrowsParseException() throws Throwable {
		try {
			JpfDateTimeUtil.getTimestamp("", "\u6628\u5929");
			fail("Expecting exception: ParseException");

		} catch (ParseException e) {
			//
			// Unparseable date: \"\"
			//
		}
	}

	@Test(timeout = 1000)
	public void testIsOverSixAddOneMonthTakingDateThrowsNullPointerException() throws Throwable {
		Date date0 = null;
		// Undeclared exception!
		try {
			JpfDateTimeUtil.isOverSixAddOneMonth((Date) null);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testIsDifferentDayTaking2Longs() throws Throwable {
		boolean boolean0 = JpfDateTimeUtil.isDifferentDay((-1419L), (-1419L));
		assertFalse(boolean0);

		String string0 = "";
		// Undeclared exception!
		try {
			java.sql.Date.valueOf("");
			fail("Expecting exception: IllegalArgumentException");

		} catch (IllegalArgumentException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testGetMonthFrtDateThrowsIllegalArgumentException() throws Throwable {
		int int0 = (-2);
		String string0 = "9h-]^sQ>Rg~zt{L";
		// Undeclared exception!
		try {
			JpfDateTimeUtil.getMonthFrtDate((-2), "9h-]^sQ>Rg~zt{L");
			fail("Expecting exception: IllegalArgumentException");

		} catch (IllegalArgumentException e) {
			//
			// Illegal pattern character 'Q'
			//
		}
	}

	@Test(timeout = 1000)
	public void testParseDateThrowsNullPointerException() throws Throwable {
		// Undeclared exception!
		try {
			JpfDateTimeUtil.parseDate("", (String) null);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testGetLastWorkDayofMonthThrowsParseException() throws Throwable {
		boolean boolean0 = JpfDateTimeUtil.isLeapYear((-434));
		assertFalse(boolean0);

		try {
			JpfDateTimeUtil.getLastWorkDayofMonth("EoN^CFPo97ja");
			fail("Expecting exception: ParseException");

		} catch (ParseException e) {
			//
			// Unparseable date: \"EoN^CFPo97ja\"
			//
		}
	}

	@Test(timeout = 1000)
	public void testGetTimestampByYYYYMMDDHHMMSSThrowsIllegalArgumentException() throws Throwable {
		try {
			JpfDateTimeUtil.getTimestampByYYYYMMDDHHMMSS("xUp6-xES={t5", "+&8#fcy9bMtO@");
			fail("Expecting exception: IllegalArgumentException");

		} catch (IllegalArgumentException e) {
			//
			// Illegal pattern character 'f'
			//
		}
	}

	@Test(timeout = 1000)
	public void testStrToDateTakingString() throws Throwable {
		Date date0 = JpfDateTimeUtil.strToDate("com.google.common.collect.Range$RangeLexOrdering");
		assertNull(date0);
	}

	@Test(timeout = 1000)
	public void testGetCurrFormattedDateTimeThrowsIllegalArgumentException() throws Throwable {
		String string0 = "input param in null";
		// Undeclared exception!
		try {
			JpfDateTimeUtil.getCurrFormattedDateTime("input param in null");
			fail("Expecting exception: IllegalArgumentException");

		} catch (IllegalArgumentException e) {
			//
			// Illegal pattern character 'i'
			//
		}
	}

	@Test(timeout = 1000)
	public void testAddSecondThrowsNullPointerException() throws Throwable {
		long long0 = JpfDateTimeUtil.getFirstDayOfNextQuarter(3465L);
		assertEquals(7747200000L, long0);

		Timestamp timestamp0 = null;
		// Undeclared exception!
		try {
			JpfDateTimeUtil.addSecond((Timestamp) null, 82);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testValidateYearThrowsIllegalArgumentException() throws Throwable {
		int int0 = (-567);
		// Undeclared exception!
		try {
			JpfDateTimeUtil.validateYear((-567));
			fail("Expecting exception: IllegalArgumentException");

		} catch (IllegalArgumentException e) {
			//
			// Invalid year (must be >= 1949 and <= 2099.
			//
		}
	}

	@Test(timeout = 1000)
	public void testParseDateThrowsIllegalArgumentException() throws Throwable {
		String string0 = "Y7lr/[[=F|ENi'U,N";
		// Undeclared exception!
		try {
			JpfDateTimeUtil.parseDate("Y7lr/[[=F|ENi'U,N", "Y7lr/[[=F|ENi'U,N");
			fail("Expecting exception: IllegalArgumentException");

		} catch (IllegalArgumentException e) {
			//
			// Illegal pattern character 'l'
			//
		}
	}

	@Test(timeout = 1000)
	public void testGetMonthFrtDateThrowsStringIndexOutOfBoundsException() throws Throwable {
		int int0 = (-3);
		String string0 = "";
		// Undeclared exception!
		try {
			JpfDateTimeUtil.getMonthFrtDate((-3), "");
			fail("Expecting exception: StringIndexOutOfBoundsException");

		} catch (StringIndexOutOfBoundsException e) {
		}
	}

	@Test(timeout = 1000)
	public void testAddOrMinusHoursReturningNonNull() throws Throwable {
		Date date0 = JpfDateTimeUtil.addOrMinusHours((-4357L), 60000);
		assertNotNull(date0);
		assertNotEquals("Thu Nov 04 23:59:55 GMT 1976", date0.toString());

		String string0 = JpfDateTimeUtil.getYYMM(date0);
		assertNotNull(string0);
		assertEquals("7611", string0);
		assertNotEquals("Thu Nov 04 23:59:55 GMT 1976", date0.toString());
	}

	@Test(timeout = 1000)
	public void testIsValidDataTime() throws Throwable {
		boolean boolean0 = JpfDateTimeUtil.isValidDataTime("", "-z;'O~ljvwIIw@PV");
		assertFalse(boolean0);

		long long0 = JpfDateTimeUtil.setToLastYearCommonDay((-1009L));
		assertEquals((-31536001009L), long0);

		try {
			Long.decode("-z;'O~ljvwIIw@PV");
			fail("Expecting exception: NumberFormatException");

		} catch (NumberFormatException e) {
			//
			// For input string: \"-z;'O~ljvwIIw@PV\"
			//
		}
	}

	@Test(timeout = 1000)
	public void testGetNextMonthThrowsStringIndexOutOfBoundsException() throws Throwable {
		// Undeclared exception!
		try {
			JpfDateTimeUtil.getNextMonth("");
			fail("Expecting exception: StringIndexOutOfBoundsException");

		} catch (StringIndexOutOfBoundsException e) {
		}
	}

	@Test(timeout = 1000)
	public void testValidateDayOfMonthThrowsIllegalArgumentException() throws Throwable {
		// Undeclared exception!
		try {
			JpfDateTimeUtil.validateDayOfMonth(3297);
			fail("Expecting exception: IllegalArgumentException");

		} catch (IllegalArgumentException e) {
			//
			// Invalid day of month.
			//
		}
	}


	@Test(timeout = 1000)
	public void testGetDayTaking1And1ThrowsIllegalArgumentException() throws Throwable {
		String string0 = JpfDateTimeUtil.getTodayYM();
		assertNotNull(string0);
		assertNotEquals("201402", string0);

		// Undeclared exception!
		try {
			JpfDateTimeUtil.getDay("|u/mdW'TUL,", (-2227));
			fail("Expecting exception: IllegalArgumentException");

		} catch (IllegalArgumentException e) {
			//
			// Unterminated quote
			//
		}
	}

	@Test(timeout = 1000)
	public void testGetNextMonthFirstDateThrowsStringIndexOutOfBoundsException() throws Throwable {
		long long0 = JpfDateTimeUtil.setToFirstDayOfCurrentYear(0L);
		assertEquals(-28800000L, long0);

		Timestamp timestamp0 = null;
		int int0 = (-12);
		String string0 = JpfDateTimeUtil.getCurrentYearMonth();
		assertNotNull(string0);
		assertNotEquals("201402", string0);

		// Undeclared exception!
		try {
			JpfDateTimeUtil.getNextMonthFirstDate("");
			fail("Expecting exception: StringIndexOutOfBoundsException");

		} catch (StringIndexOutOfBoundsException e) {
		}
	}

	@Test(timeout = 1000)
	public void testAddHourThrowsNullPointerException() throws Throwable {
		long long0 = JpfDateTimeUtil.setToFirstDayOfNextYear(0L);
		assertEquals(31507200000L, long0);

		int int0 = 1067;
		// Undeclared exception!
		try {
			JpfDateTimeUtil.addHour((Timestamp) null, 1067);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testAddOrMinusMinutes() throws Throwable {
		Date date0 = JpfDateTimeUtil.addOrMinusMinutes(1684L, 2186);
		assertNotNull(date0);
		assertNotEquals("Fri Jan 02 12:26:01 GMT 1970", date0.toString());
	}

	@Test(timeout = 1000)
	public void testLong2StrTakingLong() throws Throwable {
		Long long0 = new Long(481L);
		assertNotNull(long0);
		assertEquals(481L, (long) long0);

		String string0 = Long.toUnsignedString(481L);
		assertNotNull(string0);
		assertEquals("481", string0);

		int int0 = Long.compare(481L, 0L);
		assertEquals(1, int0);

		String string1 = JpfDateTimeUtil.long2Str(long0);
		assertFalse(string1.equals(string0));
		assertNotNull(string1);
		assertEquals("1970\u5E7401\u670801\u65E5", string1);

		try {
			Long.parseUnsignedLong("1970\u5E7401\u670801\u65E5", 0);
			fail("Expecting exception: NumberFormatException");

		} catch (NumberFormatException e) {
			//
			// radix 0 less than Character.MIN_RADIX
			//
		}
	}

	@Test(timeout = 1000)
	public void testGetCurrentMonthDaysTakingLong() throws Throwable {
		long long0 = (-1L);
		int int0 = JpfDateTimeUtil.getCurrentMonthDays((-1L));
		assertEquals(31, int0);

		// Undeclared exception!
		try {
			JpfDateTimeUtil.getNextMonthDate("gZ_L1ZL%))v'wG:dg");
			fail("Expecting exception: NumberFormatException");

		} catch (NumberFormatException e) {
			//
			// For input string: \"gZ_L\"
			//
		}
	}

	@Test(timeout = 1000)
	public void testStrToStampTakingString() throws Throwable {
		Timestamp timestamp0 = JpfDateTimeUtil.strToStamp("H*qPcK'}8a5#");
		assertNull(timestamp0);

		// Undeclared exception!
		try {
			Timestamp.valueOf("H*qPcK'}8a5#");
			fail("Expecting exception: IllegalArgumentException");

		} catch (IllegalArgumentException e) {
			//
			// Timestamp format must be yyyy-mm-dd hh:mm:ss[.fffffffff]
			//
		}
	}

	@Test(timeout = 1000)
	public void testGetLastMonthDateThrowsNumberFormatException() throws Throwable {
		// Undeclared exception!
		try {
			JpfDateTimeUtil.getLastMonthDate("\u6587\u4EF6\u4E0D\u5B58\u5728:");
			fail("Expecting exception: NumberFormatException");

		} catch (NumberFormatException e) {
			//
			// For input string: \"\u6587\u4EF6\u4E0D\u5B58\"
			//
		}
	}

	@Test(timeout = 1000)
	public void testSqlDateToStrThrowsNullPointerException() throws Throwable {
		String string0 = JpfDateTimeUtil.getSixAddOneMonthTime();
		assertNotNull(string0);
		assertNotEquals("2014-02-14 23:59:59", string0);

		java.sql.Date date0 = null;
		// Undeclared exception!
		try {
			JpfDateTimeUtil.sqlDateToStr((java.sql.Date) null, "2014-02-14 23:59:59");
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testTranslateZoneTimeThrowsNullPointerException() throws Throwable {
		Timestamp timestamp0 = JpfDateTimeUtil.getLastDayThisMonth();
		assertNotNull(timestamp0);
		assertEquals(999000000, timestamp0.getNanos());
		assertNotEquals("2014-02-14 20:21:21.32", timestamp0.toString());

		// Undeclared exception!
		try {
			JpfDateTimeUtil.translateZoneTime(timestamp0, (TimeZone) null, (TimeZone) null);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(expected = java.text.ParseException.class)
	public void testGetSpecifiedDayAfterThrowsNullPointerException() throws Throwable {
		String string0 = " z";

		JpfDateTimeUtil.getSpecifiedDayAfter("Invalid year (must be >= 1949 and <= 2099.", " z");
		fail("Expecting exception: NullPointerException");

	}

	@Test(timeout = 1000)
	public void testSetToLastMonthCommonDay() throws Throwable {
		long long0 = JpfDateTimeUtil.setToLastMonthCommonDay(86400000L);
		assertEquals(-2592000000L, long0);

		// Undeclared exception!
		try {
			JpfDateTimeUtil.getDistanceOfTwoDate((Date) null, (Date) null);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testGetDateTimeDurationWithZero() throws Throwable {
		String string0 = JpfDateTimeUtil.getDateTimeDuration(0.0F);
		assertNotNull(string0);
		assertEquals("00:00:00", string0);

		long long0 = 0L;
		String string1 = JpfDateTimeUtil.friendlyTime(0L);
		assertFalse(string1.equals(string0));
		assertNotNull(string1);
		assertEquals("1970\u5E7401\u670801\u65E5", string1);

		String string2 = ":yX%H=";
		// Undeclared exception!
		try {
			JpfDateTimeUtil.getNextMonthFirstDateRtnDate(":yX%H=");
			fail("Expecting exception: NumberFormatException");

		} catch (NumberFormatException e) {
			//
			// For input string: \":yX%\"
			//
		}
	}

	@Test(timeout = 1000)
	public void testStrToDateTaking2ArgumentsThrowsNullPointerException() throws Throwable {
		// Undeclared exception!
		try {
			JpfDateTimeUtil.strToDate((String) null, (String) null);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testStrToDateTaking2ArgumentsThrowsIllegalArgumentException() throws Throwable {
		String string0 = "utf-8";
		// Undeclared exception!
		try {
			JpfDateTimeUtil.strToDate("utf-8", "utf-8");
			fail("Expecting exception: IllegalArgumentException");

		} catch (IllegalArgumentException e) {
			//
			// Illegal pattern character 't'
			//
		}
	}

	@Test(timeout = 1000)
	public void testGetMonthFirstTimeThrowsNullPointerException() throws Throwable {
		long long0 = (-8L);
		long long1 = JpfDateTimeUtil.todayPastMillisecond((-8L));
		assertFalse(long1 == long0);
		assertEquals(28740L, long1);

		Date date0 = null;
		// Undeclared exception!
		try {
			JpfDateTimeUtil.getMonthFirstTime((Date) null);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testGetNextDayThrowsNullPointerException() throws Throwable {
		// Undeclared exception!
		try {
			JpfDateTimeUtil.getNextDay((Date) null);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testGetDayTaking1And1ThrowsNullPointerExceptionAndGetDayTaking1And1() throws Throwable {
		int int0 = 0;
		// Undeclared exception!
		try {
			JpfDateTimeUtil.getDay((String) null, 0);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testGetDateAddDayTaking3ArgumentsThrowsIllegalArgumentException() throws Throwable {
		int int0 = (-439);
		// Undeclared exception!
		try {
			JpfDateTimeUtil.getDateAddDay("", (-439), "");
			fail("Expecting exception: IllegalArgumentException");

		} catch (IllegalArgumentException e) {
			//
			// Timestamp format must be yyyy-mm-dd hh:mm:ss[.fffffffff]
			//
		}
	}

	@Test(timeout = 1000)
	public void testGetCurrFormattedDateTimeThrowsNullPointerException() throws Throwable {
		int int0 = JpfDateTimeUtil.getDayOfWeek((-2763L));
		assertEquals(4, int0);

		String string0 = null;
		// Undeclared exception!
		try {
			JpfDateTimeUtil.getCurrFormattedDateTime((String) null);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testIsLargerMonthWithNonEmptyString() throws Throwable {
		// Undeclared exception!
		try {
			JpfDateTimeUtil.isLargerMonth("','yyyy-mm-dd hh24miss')", "','yyyy-mm-dd hh24miss')");
			fail("Expecting exception: NumberFormatException");

		} catch (NumberFormatException e) {
			//
			// For input string: \"','yyyy-mm-dd hh24miss')\"
			//
		}
	}

	@Test(timeout = 1000)
	public void testIsOverSixAddOneMonthTakingStringThrowsParseException() throws Throwable {
		try {
			JpfDateTimeUtil.isOverSixAddOneMonth("yyyy\u5E74MM\u6708dd\u65E5");
			fail("Expecting exception: ParseException");

		} catch (ParseException e) {
			//
			// Unparseable date: \"yyyy\u5E74MM\u6708dd\u65E5\"
			//
		}
	}


	@Test(timeout = 1000)
	public void testBetweenMinuteWithNonNull() throws Throwable {
		java.sql.Date date0 = JpfDateTimeUtil.getSqlDate();
		assertNotNull(date0);

		long long0 = JpfDateTimeUtil.betweenMinute(date0, date0);
		assertEquals(0L, long0);
	}

	@Test(timeout = 1000)
	public void testStrToStampTaking2ArgumentsThrowsNullPointerException() throws Throwable {
		String string0 = "z\\JARDtBl8*Kv+x";
		String string1 = null;
		// Undeclared exception!
		try {
			JpfDateTimeUtil.strToStamp("zJARDtBl8*Kv+x", (String) null);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testGetCurenDayAddDayThrowsIllegalArgumentException() throws Throwable {
		String string0 = "VewOK@U]{q))=_";
		int int0 = 2970;
		// Undeclared exception!
		try {
			JpfDateTimeUtil.getCurenDayAddDay("VewOK@U]{q))=_", 2970);
			fail("Expecting exception: IllegalArgumentException");

		} catch (IllegalArgumentException e) {
			//
			// Illegal pattern character 'V'
			//
		}
	}

	@Test(timeout = 1000)
	public void testGetDateOfTaking5ArgumentsWithZero() throws Throwable {
		// Undeclared exception!
		try {
			JpfDateTimeUtil.getDateOf(0, 722, 0, 45, 0);
			fail("Expecting exception: IllegalArgumentException");

		} catch (IllegalArgumentException e) {
			//
			// Invalid minute (must be >= 0 and <= 59).
			//
		}
	}

	@Test(timeout = 1000)
	public void testGetIntervalThrowsStringIndexOutOfBoundsException() throws Throwable {
		Long long0 = new Long(1827L);
		assertNotNull(long0);
		assertEquals(1827L, (long) long0);

		long long1 = Long.sum(1827L, 0L);
		assertEquals(1827L, long1);

		String string0 = JpfDateTimeUtil.long2Str(long0);
		assertTrue(long0.equals(long1));
		assertNotNull(string0);
		assertEquals("1970\u5E7401\u670801\u65E5", string0);

		java.sql.Date date0 = JpfDateTimeUtil.getSqlDate();
		assertNotNull(date0);

		Date date1 = JpfDateTimeUtil.getWeekLastTime(date0);
		assertNotNull(date1);
		assertNotEquals("Fri Feb 14 20:21:21 GMT 2014", date1.toString());

		// Undeclared exception!
		try {
			JpfDateTimeUtil.getInterval("", "kSQ[S1CQyG");
			fail("Expecting exception: StringIndexOutOfBoundsException");

		} catch (StringIndexOutOfBoundsException e) {
		}
	}

	@Test(timeout = 1000)
	public void testGetLastYearCommonDayWithNull() throws Throwable {
		String string0 = null;
		// Undeclared exception!
		try {
			JpfDateTimeUtil.getLastYearCommonDay((String) null, (String) null);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testDateDiffThrowsNullPointerException() throws Throwable {
		Date date0 = JpfDateTimeUtil.parseDate("", "2*)");
		assertNull(date0);

		// Undeclared exception!
		try {
			JpfDateTimeUtil.DateDiff((Date) null, (Date) null);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testGetDateOfTaking5ArgumentsWithNegative() throws Throwable {
		String string0 = JpfDateTimeUtil.getDateTimeDuration((-1.0F));
		assertNotNull(string0);
		assertEquals("23:59:59", string0);

		int int0 = 50;
		// Undeclared exception!
		try {
			JpfDateTimeUtil.getDateOf(50, (-859), (-859), 50, 169);
			fail("Expecting exception: IllegalArgumentException");

		} catch (IllegalArgumentException e) {
			//
			// Invalid minute (must be >= 0 and <= 59).
			//
		}
	}

	@Test(timeout = 1000)
	public void testGetDayTaking1And1ThrowsNullPointerExceptionAndGetDayTaking1And1AndStrToStampTaking2Arguments()
			throws Throwable {
		String string0 = "";
		Timestamp timestamp0 = JpfDateTimeUtil.strToStamp("", "");
		assertNull(timestamp0);

		int int0 = 51;
		// Undeclared exception!
		try {
			JpfDateTimeUtil.getDay((Date) null, 51);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testGetDateOfPreMonthFirstDayThrowsNullPointerException() throws Throwable {
		Timestamp timestamp0 = null;
		String string0 = "distance";
		String string1 = JpfDateTimeUtil.getYYYYMMDDHHMMSS((Timestamp) null, "distance");
		assertNull(string1);

		Date date0 = JpfDateTimeUtil.getAddSecondDate((Date) null, 1062);
		assertNotNull(date0);
		assertNotEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());

		double double0 = JpfDateTimeUtil.calcRunTime(1169L, 6110L);
		assertEquals(4941.0, double0, 0.01);

		// Undeclared exception!
		try {
			JpfDateTimeUtil.getDateOfPreMonthFirstDay((Date) null);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testAddMinutessThrowsNullPointerException() throws Throwable {
		// Undeclared exception!
		try {
			JpfDateTimeUtil.addMinutess((Date) null, 3402);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testLong2StrTaking2ArgumentsReturningEmptyString() throws Throwable {
		String string0 = JpfDateTimeUtil.long2Str(0L, "");
		assertNotNull(string0);
		assertEquals("", string0);

		// Undeclared exception!
		try {
			JpfDateTimeUtil.validateDayOfWeek(1028);
			fail("Expecting exception: IllegalArgumentException");

		} catch (IllegalArgumentException e) {
			//
			// Invalid day of week.
			//
		}
	}

	@Test(timeout = 1000)
	public void testGetDateAddMinuteThrowsNullPointerException() throws Throwable {
		String string0 = "[e5q~_M>";
		Timestamp timestamp0 = JpfDateTimeUtil.getTimestampFromStr("[e5q~_M>");
		assertNull(timestamp0);

		Instant instant0 = null;
		// Undeclared exception!
		try {
			JpfDateTimeUtil.getDateAddMinute((Timestamp) null, (-1));
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testGetLastDayThrowsNullPointerException() throws Throwable {
		Date date0 = null;
		Date date1 = JpfDateTimeUtil.getDateFirstTime((Date) null);
		assertNull(date1);

		// Undeclared exception!
		try {
			JpfDateTimeUtil.getLastDay((Date) null);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testSetTimeToNextDay0H0M0STakingLong() throws Throwable {
		int int0 = JpfDateTimeUtil.compare_date("cm.@_", "cm.@_");
		assertEquals(0, int0);

		long long0 = 0L;
		int int1 = JpfDateTimeUtil.getCurrentMonthDays(0L);
		assertFalse(int1 == int0);
		assertEquals(31, int1);

		long long1 = JpfDateTimeUtil.setTimeToNextDay0H0M0S((-1772L));
		assertFalse(long1 == long0);
		assertEquals(57600000L, long1);

		// Undeclared exception!
		try {
			Timestamp.valueOf("");
			fail("Expecting exception: IllegalArgumentException");

		} catch (IllegalArgumentException e) {
			//
			// Timestamp format must be yyyy-mm-dd hh:mm:ss[.fffffffff]
			//
		}
	}


	@Test(timeout = 1000)
	public void testGetNextMonthFirstDayTaking2ArgumentsThrowsNullPointerException() throws Throwable {
		String string0 = JpfDateTimeUtil.getSpecTime("", 0, (-421), 0, 0, 0, (-421));
		assertNotNull(string0);
		assertEquals("", string0);

		String string1 = JpfDateTimeUtil.getTomorrow();
		assertFalse(string1.equals(string0));
		assertNotNull(string1);
		assertNotEquals("2014-02-15", string1);

		String string2 = JpfDateTimeUtil.getCurrDateTime_yyyymmddhhmmss();
		assertFalse(string2.equals(string0));
		assertFalse(string2.equals(string1));
		assertNotNull(string2);
		assertNotEquals("20140214202121", string2);

		// Undeclared exception!
		try {
			JpfDateTimeUtil.getNextMonthFirstDay((Date) null, 0);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testGetBetweenDaysThrowsNullPointerException() throws Throwable {
		try {
			JpfDateTimeUtil.getBetweenDays((String) null, (String) null);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testValidateMonthThrowsIllegalArgumentException() throws Throwable {
		int int0 = (-178);
		// Undeclared exception!
		try {
			JpfDateTimeUtil.validateMonth((-178));
			fail("Expecting exception: IllegalArgumentException");

		} catch (IllegalArgumentException e) {
			//
			// Invalid month (must be >= 1 and <= 12.
			//
		}
	}

	@Test(timeout = 1000)
	public void testStrToDateTaking2ArgumentsThrowsException() throws Throwable {
		String string0 = "\uFF08\u5468\u516D\uFF09";
		try {
			JpfDateTimeUtil.strToDate("", "\uFF08\u5468\u516D\uFF09");
			fail("Expecting exception: Exception");

		} catch (Exception e) {
			//
			// error parse date:
			//
		}
	}

	@Test(timeout = 1000)
	public void testGetRBossQryStartDateTakingString() throws Throwable {
		String string0 = JpfDateTimeUtil.getRBossQryStartDate("\uFF08\u5468\u4E00\uFF09");
		assertNotNull(string0);
		assertEquals("\uFF08\u5468\u4E00\uFF09", string0);

		try {
			JpfDateTimeUtil.addDays("\uFF08\u5468\u4E00\uFF09", 5615);
			fail("Expecting exception: ParseException");

		} catch (ParseException e) {
			//
			// Unparseable date: \"\uFF08\u5468\u4E00\uFF09\"
			//
		}
	}

	@Test(timeout = 1000)
	public void testAddDaysTaking1And1ThrowsNullPointerExceptionAndAddDaysTaking1And1AndAddDaysTaking1And1WithNull0()
			throws Throwable {
		Date date0 = null;
		int int0 = (-1278);
		// Undeclared exception!
		try {
			JpfDateTimeUtil.addDays((Date) null, (-1278));
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testGetCurrFormattedDateTimeReturningEmptyString() throws Throwable {
		String string0 = JpfDateTimeUtil.getCurrFormattedDateTime("");
		assertNotNull(string0);
		assertEquals("", string0);

		long long0 = JpfDateTimeUtil.setToNextYearCommonDay((-1349L));
		assertEquals((31535998651L), long0);

		try {
			JpfDateTimeUtil.getLastWorkDayofMonth("u^#Yv@Cd'Zi");
			fail("Expecting exception: ParseException");

		} catch (ParseException e) {
			//
			// Unparseable date: \"u^#Yv@Cd'Zi\"
			//
		}
	}

	@Test(timeout = 1000)
	public void testGetDateOfTaking3ArgumentsThrowsIllegalArgumentException() throws Throwable {
		int int0 = 127;
		int int1 = 1704;
		// Undeclared exception!
		try {
			JpfDateTimeUtil.getDateOf(127, 1704, 127);
			fail("Expecting exception: IllegalArgumentException");

		} catch (IllegalArgumentException e) {
			//
			// Invalid second (must be >= 0 and <= 59).
			//
		}
	}

	@Test(timeout = 1000)
	public void testValidateMonthWithPositive() throws Throwable {
		// Undeclared exception!
		try {
			JpfDateTimeUtil.validateMonth(48);
			fail("Expecting exception: IllegalArgumentException");

		} catch (IllegalArgumentException e) {
			//
			// Invalid month (must be >= 1 and <= 12.
			//
		}
	}

	@Test(timeout = 1000)
	public void testGetLastWorkDayofMonthThrowsNullPointerException() throws Throwable {
		try {
			JpfDateTimeUtil.getLastWorkDayofMonth((String) null);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testAddDaysTaking1And1ThrowsNullPointerExceptionAndAddDaysTaking1And1AndAddDaysTaking1And1WithNull1()
			throws Throwable {
		String string0 = null;
		int int0 = (-1340);
		try {
			JpfDateTimeUtil.addDays((String) null, (-1340));
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testGetLastYearCommonDayThrowsIllegalArgumentException() throws Throwable {
		String string0 = "c13;;!xB(EJ0%_ui#;l";
		// Undeclared exception!
		try {
			JpfDateTimeUtil.getLastYearCommonDay("c13;;!xB(EJ0%_ui#;l", "c13;;!xB(EJ0%_ui#;l");
			fail("Expecting exception: IllegalArgumentException");

		} catch (IllegalArgumentException e) {
			//
			// Illegal pattern character 'c'
			//
		}
	}

	@Test(timeout = 1000)
	public void testFriendlyTimeWithPositiveAndGetYearWithPositive() throws Throwable {
		int int0 = 1900;
		String string0 = JpfDateTimeUtil.getYear(1900);
		assertNotNull(string0);
		assertNotEquals("2014-02-14 20:21:21", string0);

		String string1 = JpfDateTimeUtil.friendlyTime(3836L);
		assertFalse(string1.equals(string0));
		assertNotNull(string1);
		assertEquals("1970\u5E7401\u670801\u65E5", string1);

		Date date0 = null;
		// Undeclared exception!
		try {
			JpfDateTimeUtil.getDistanceOfTwoDate((Date) null, (Date) null);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testSetTimeToNextDay0H0M0STakingTimestampThrowsNullPointerException() throws Throwable {
		Timestamp timestamp0 = null;
		// Undeclared exception!
		try {
			JpfDateTimeUtil.setTimeToNextDay0H0M0S((Timestamp) null);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// Timestamp can not be null
			//
		}
	}

	@Test(timeout = 1000)
	public void testSqlDateToStrThrowsIllegalArgumentException() throws Throwable {
		String string0 = JpfDateTimeUtil.getFormattedDateTime("");
		assertNotNull(string0);
		assertEquals("", string0);

		java.sql.Date date0 = null;
		// Undeclared exception!
		try {
			JpfDateTimeUtil.sqlDateToStr((java.sql.Date) null, "II Mc!u~p6`~_");
			fail("Expecting exception: IllegalArgumentException");

		} catch (IllegalArgumentException e) {
			//
			// Illegal pattern character 'I'
			//
		}
	}

	@Test(timeout = 1000)
	public void testSetTimeToLastDay0H0M0SThrowsNullPointerException() throws Throwable {
		// Undeclared exception!
		try {
			JpfDateTimeUtil.setTimeToLastDay0H0M0S((Timestamp) null);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// Timestamp can not be null
			//
		}
	}


	@Test(timeout = 1000)
	public void testDateAddDayThrowsNullPointerException() throws Throwable {
		Timestamp timestamp0 = JpfDateTimeUtil.strToStamp("~A}Z[ ");
		assertNull(timestamp0);

		int int0 = 0;
		// Undeclared exception!
		try {
			JpfDateTimeUtil.DateAddDay((Timestamp) null, (-3826));
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testGetRBossQryStartDateTaking2Arguments() throws Throwable {
		int int0 = 10;
		String string0 = JpfDateTimeUtil.getRBossQryStartDate(";gm", 10);
		assertNotNull(string0);
		assertEquals(";gm", string0);

		Date date0 = null;
		Timestamp timestamp0 = JpfDateTimeUtil.getLastHour((Date) null);
		assertNotNull(timestamp0);
		assertNotEquals("2014-02-14 20:21:21.32", timestamp0.toString());
		assertEquals(59000000, timestamp0.getNanos());

		long long0 = 0L;
		ZoneOffset zoneOffset0 = ZoneOffset.UTC;
		assertNotNull(zoneOffset0);

		// Undeclared exception!
		try {
			ZoneId.ofOffset(";gm", zoneOffset0);
			fail("Expecting exception: IllegalArgumentException");

		} catch (IllegalArgumentException e) {
			//
			// prefix should be GMT, UTC or UT, is: ;gm
			//
		}
	}


	@Test(timeout = 1000)
	public void testGetDateTimeThrowsNullPointerException() throws Throwable {
		Date date0 = null;
		Date date1 = JpfDateTimeUtil.getDateFirstTime((Date) null);
		assertNull(date1);

		// Undeclared exception!
		try {
			JpfDateTimeUtil.getDateTime((Date) null);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testIsDifferentDayTaking2LongsReturningTrue() throws Throwable {
		boolean boolean0 = JpfDateTimeUtil.isDifferentDay((-1790L), 86400L);

		// Undeclared exception!
		try {
			JpfDateTimeUtil.getDateOf(3073, 1461, 1176);
			fail("Expecting exception: IllegalArgumentException");

		} catch (IllegalArgumentException e) {
			//
			// Invalid second (must be >= 0 and <= 59).
			//
		}
	}

	@Test(timeout = 1000)
	public void testIsDifferentDayTaking2LongsWithZeroAndZero() throws Throwable {
		long long0 = JpfDateTimeUtil.setTimeTo0H0M0S(0L);
		assertEquals(-28800000L, long0);

		boolean boolean0 = JpfDateTimeUtil.isDifferentDay(0L, 0L);
		assertFalse(boolean0);

		String string0 = JpfDateTimeUtil.friendlyTime(0L);
		assertNotNull(string0);
		assertEquals("1970\u5E7401\u670801\u65E5", string0);
	}

	@Test(timeout = 1000)
	public void testGetLastDayOfMonthTaking2ArgumentsThrowsIllegalArgumentException() throws Throwable {
		String string0 = JpfDateTimeUtil.getCurrentDay(89);
		assertNotNull(string0);
		assertNotEquals("2014-05-14", string0);

		String string1 = "";
		int int0 = 2850;
		String string2 = JpfDateTimeUtil.getRBossQryStartDate("", 2850);
		assertFalse(string2.equals(string0));
		assertTrue(string2.equals(string1));
		assertNotNull(string2);
		assertEquals("", string2);

		// Undeclared exception!
		try {
			JpfDateTimeUtil.getLastDayOfMonth(0, 89);
			fail("Expecting exception: IllegalArgumentException");

		} catch (IllegalArgumentException e) {
			//
			// Illegal month number: 0
			//
		}
	}

	@Test(timeout = 1000)
	public void testGetDateOfTaking3ArgumentsAndGetDateOfTaking3ArgumentsWithNegative() throws Throwable {
		int int0 = (-502);
		int int1 = 718;
		int int2 = 429;
		// Undeclared exception!
		try {
			JpfDateTimeUtil.getDateOf((-502), 718, 429);
			fail("Expecting exception: IllegalArgumentException");

		} catch (IllegalArgumentException e) {
			//
			// Invalid second (must be >= 0 and <= 59).
			//
		}
	}

	@Test(expected = java.text.ParseException.class)
	public void testGetSpecifiedDayBeforeThrowsNullPointerException() throws Throwable {

		JpfDateTimeUtil.getSpecifiedDayBefore("pvOXoc", "da");
		fail("Expecting exception: NullPointerException");

	}

	@Test(timeout = 1000)
	public void testGetLastNMonthsReturningNonEmptyArray() throws Throwable {
		String[] stringArray0 = JpfDateTimeUtil.getLastNMonths(31);
		assertNotNull(stringArray0);
		assertEquals(31, stringArray0.length);

		// Undeclared exception!
		try {
			JpfDateTimeUtil.getInterval("", "");
			fail("Expecting exception: StringIndexOutOfBoundsException");

		} catch (StringIndexOutOfBoundsException e) {
		}
	}

	@Test(timeout = 1000)
	public void testAddYearThrowsNullPointerException() throws Throwable {
		Timestamp timestamp0 = JpfDateTimeUtil.strToStamp((String) null, " logging ");
		assertNull(timestamp0);

		int int0 = (-1147);
		// Undeclared exception!
		try {
			JpfDateTimeUtil.addYear((Timestamp) null, (-1147));
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testGetDateThrowsIllegalArgumentException() throws Throwable {
		String string0 = "70t?";
		// Undeclared exception!
		try {
			JpfDateTimeUtil.getDate("70t?", "/n#0`K,t))|DhIY");
			fail("Expecting exception: IllegalArgumentException");

		} catch (IllegalArgumentException e) {
			//
			// Illegal pattern character 'n'
			//
		}
	}

	@Test(timeout = 1000)
	public void testAddMonthsTaking1And1ThrowsStringIndexOutOfBoundsException() throws Throwable {
		int int0 = 306654252;
		// Undeclared exception!
		try {
			JpfDateTimeUtil.addMonths("", 306654252);
			fail("Expecting exception: StringIndexOutOfBoundsException");

		} catch (StringIndexOutOfBoundsException e) {
		}
	}

	@Test(timeout = 1000)
	public void testGetLastMonthThrowsNullPointerException() throws Throwable {
		// Undeclared exception!
		try {
			JpfDateTimeUtil.getLastMonth((String) null);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testGetDateStartTimeThrowsNullPointerException() throws Throwable {
		Timestamp timestamp0 = JpfDateTimeUtil.strToStamp("Timestamp can not be null", " + ");
		assertNull(timestamp0);

		int int0 = 9;
		// Undeclared exception!
		try {
			JpfDateTimeUtil.getDateStartTime((Date) null, 9);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}


	@Test(timeout = 1000)
	public void testBetweenMinuteThrowsNullPointerException() throws Throwable {
		java.sql.Date date0 = JpfDateTimeUtil.getSqlDate();
		assertNotNull(date0);

		java.sql.Date date1 = null;
		// Undeclared exception!
		try {
			JpfDateTimeUtil.betweenMinute(date0, (Date) null);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testGetWeekLastTimeThrowsNullPointerException() throws Throwable {
		String string0 = JpfDateTimeUtil.getCurrentYearMonth();
		assertNotNull(string0);
		assertNotEquals("201402", string0);

		Date date0 = null;
		// Undeclared exception!
		try {
			JpfDateTimeUtil.getWeekLastTime((Date) null);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testGetDateForNeed() throws Throwable {
		int int0 = 42;
		String string0 = JpfDateTimeUtil.getDateForNeed(42);
		assertNotNull(string0);
		assertNotEquals("2014-02-14 21:03:21", string0);

		// Undeclared exception!
		try {
			JpfDateTimeUtil.getLastMonthDateRtnDate("/KviJUUk^j2JMq");
			fail("Expecting exception: NumberFormatException");

		} catch (NumberFormatException e) {
			//
			// For input string: \"/Kvi\"
			//
		}
	}

	@Test(timeout = 1000)
	public void testGetMonthStart() throws Throwable {
		Date date0 = null;
		Date date1 = JpfDateTimeUtil.getMonthStart((Date) null);
		assertNull(date1);

		// Undeclared exception!
		try {
			JpfDateTimeUtil.getLastDay((Date) null);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testGetCurrentMonthDaysTakingTimestampThrowsNullPointerException() throws Throwable {
		// Undeclared exception!
		try {
			JpfDateTimeUtil.getCurrentMonthDays((Timestamp) null);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// Timestamp can not be null
			//
		}
	}

	@Test(timeout = 1000)
	public void testGetMonthLastTimeThrowsNullPointerException() throws Throwable {
		Timestamp timestamp0 = null;
		String string0 = "distance";
		String string1 = JpfDateTimeUtil.getYYYYMMDDHHMMSS((Timestamp) null, "distance");
		assertNull(string1);

		Date date0 = JpfDateTimeUtil.getAddSecondDate((Date) null, 1062);
		assertNotNull(date0);
		assertNotEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());

		double double0 = JpfDateTimeUtil.calcRunTime(1169L, 6110L);
		assertEquals(4941.0, double0, 0.01);

		Timestamp timestamp1 = JpfDateTimeUtil.strToStamp((String) null, (String) null);
		assertNull(timestamp1);

		// Undeclared exception!
		try {
			JpfDateTimeUtil.getMonthLastTime((Date) null);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testAddHoursThrowsNullPointerException() throws Throwable {
		Date date0 = null;
		int int0 = 0;
		// Undeclared exception!
		try {
			JpfDateTimeUtil.addHours((Date) null, 0);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testGetDateOfCurrentMonthEndDayThrowsNullPointerException() throws Throwable {
		// Undeclared exception!
		try {
			JpfDateTimeUtil.getDateOfCurrentMonthEndDay((Date) null);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testDateToStrThrowsIllegalArgumentException() throws Throwable {
		Date date0 = JpfDateTimeUtil.addOrMinusMonth(38L, (-2926));
		assertNotNull(date0);
		assertNotEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());

		// Undeclared exception!
		try {
			JpfDateTimeUtil.dateToStr(date0, "GMT+04:00");
			fail("Expecting exception: IllegalArgumentException");

		} catch (IllegalArgumentException e) {
			//
			// Illegal pattern character 'T'
			//
		}
	}

	@Test(timeout = 1000)
	public void testGetTimestampThrowsIllegalArgumentException() throws Throwable {
		// Undeclared exception!
		try {
			JpfDateTimeUtil.getTimestamp("O", "O");
			fail("Expecting exception: IllegalArgumentException");

		} catch (IllegalArgumentException e) {
			//
			// Illegal pattern character 'O'
			//
		}
	}

	@Test(timeout = 1000)
	public void testSetToFirstDayOfCurrentYearReturningNegative() throws Throwable {
		long long0 = (-387L);
		long long1 = JpfDateTimeUtil.setToFirstDayOfCurrentYear((-387L));

		assertEquals((-28800000L), long1);

		Timestamp timestamp0 = null;
		int int0 = (-12);
		// Undeclared exception!
		try {
			JpfDateTimeUtil.addHour((Timestamp) null, (-12));
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testGetFormattedDateTaking1And1ReturningEmptyString() throws Throwable {
		long long0 = JpfDateTimeUtil.setToFirstDayOfCurrentYear(0L);
		assertEquals(-28800000L, long0);

		Timestamp timestamp0 = null;
		int int0 = (-12);
		String string0 = JpfDateTimeUtil.getFormattedDate((Timestamp) null, "");
		assertNotNull(string0);
		assertEquals("", string0);

		// Undeclared exception!
		try {
			JpfDateTimeUtil.getNextMonthFirstDate("");
			fail("Expecting exception: StringIndexOutOfBoundsException");

		} catch (StringIndexOutOfBoundsException e) {
		}
	}

	@Test(timeout = 1000)
	public void testSetToLastMonthCommonDayReturningNegative() throws Throwable {
		long long0 = JpfDateTimeUtil.setToLastMonthCommonDay((-4140L));
		assertEquals((-2678404140L), long0);

		int int0 = (-584);
		try {
			JpfDateTimeUtil.addDays("a", (-584));
			fail("Expecting exception: ParseException");

		} catch (ParseException e) {
			//
			// Unparseable date: \"a\"
			//
		}
	}


	@Test(timeout = 1000)
	public void testGetDateOfCurrentEndDayThrowsNullPointerException() throws Throwable {
		Date date0 = null;
		Date date1 = JpfDateTimeUtil.getDateFirstTime((Date) null);
		assertNull(date1);

		// Undeclared exception!
		try {
			JpfDateTimeUtil.getDateOfCurrentEndDay((Date) null);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testCalcRunTimeReturningNegative() throws Throwable {
		double double0 = JpfDateTimeUtil.calcRunTime(9223372036854775807L, 0L);
		assertEquals((-9.223372036854776E18), double0, 0.01);
	}


}
