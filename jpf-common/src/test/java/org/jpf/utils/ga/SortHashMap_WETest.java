/*
 * This file was automatically generated by wupf@
 * Thu May 07 03:25:31 GMT 2020
 */

package org.jpf.utils.ga;

import static org.junit.Assert.assertEquals;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.junit.Test;

import com.alibaba.fastjson.JSON;

public class SortHashMap_WETest {



	@Test(timeout = 3000)
	public void testsortMapByKey() throws Throwable {
		try {
			Map<String, String> maps = new HashMap<String, String>();
			maps.put("boy", "9");
			maps.put("cat", "7");
			maps.put("dog", "1");
			maps.put("apple", "5");
			maps.put("Apple", "5");
			maps.put("a1", "5");

			List<Map.Entry<String, String>> info = new SortHashMap().sortMapByKey(maps);

			for (int j = 0; j < info.size(); j++) {
				System.out.println(info.get(j).getKey() + "------->" + info.get(j).getValue());
			}
		} catch (Exception e) {
			// TODO: handle exception
		}
	}

	@Test(timeout = 3000)
	public void testsortMapByKey_2() throws Throwable {

		String[] a1 = new String[] { "1", "2", "3" };

		for (int i = 0; i < a1.length; i++) {
			if (a1[i] == "2") {
				a1[i] = "4";
			}
		}
		System.out.println(JSON.toJSONString(a1));

	}

	@Test(timeout = 3000)
	public void testsortMapByKey_3() throws Throwable {
		LinkedHashMap<String, Integer> maps = new LinkedHashMap<String, Integer>();
		maps.put("boy", 8);
		maps.put("cat", 7);
		maps.put("dog", 1);
		maps.put("apple", 5);
		// 排序前的输出
		Set set = maps.entrySet();
		Iterator i = set.iterator();
		while (i.hasNext()) {
			Map.Entry<String, Integer> entry1 = (Map.Entry<String, Integer>) i.next();
			System.out.println(entry1.getKey() + "-------->" + entry1.getValue());
		}

		System.out.println("----------------");
		// 排序后的输出
		List<Map.Entry<String, Integer>> info = new ArrayList<Map.Entry<String, Integer>>(maps.entrySet());
		Collections.sort(info, new Comparator<Map.Entry<String, Integer>>() {
			@Override
			public int compare(Map.Entry<String, Integer> obj1, Map.Entry<String, Integer> obj2) {
				return obj2.getValue() - obj1.getValue();
			}
		});

		for (int j = 0; j < info.size(); j++) {
			System.out.println(info.get(j).getKey() + "------->" + info.get(j).getValue());
		}
	}

	@Test(timeout = 3000)
	public void testSortMapByKeyReturningListWhereIsEmptyIsTrueAndListWhereSizeIsZero() throws Throwable {
		HashMap<String, String> hashMap0 = new HashMap<String, String>();
		List<Map.Entry<String, String>> list0 = new SortHashMap().sortMapByKey(hashMap0);
		assertEquals(0, list0.size());
	}
}
