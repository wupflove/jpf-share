/*
 * This file was automatically generated by         wupf
 * Thu Nov 28 11:57:37 GMT 2019
 */

package org.jpf.utils;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.util.regex.PatternSyntaxException;

import org.junit.Test;

public class JpfStringUtil_WPTest {

	@Test(timeout = 1000)
	public void testRemoveQuotesReturningEmptyString() throws Throwable {
		String string0 = JpfStringUtil.removeQuotes((String) null);
		assertEquals("", string0);
	}

	@Test(timeout = 1000)
	public void testTrimBlankReturningNull() throws Throwable {
		String string0 = JpfStringUtil.trimBlank("null");
		assertNull(string0);
	}

	@Test(timeout = 1000)
	public void testTrimReturningNull() throws Throwable {
		String string0 = JpfStringUtil.trim("NaN");
		assertNull(string0);
	}

	@Test(timeout = 1000)
	public void testIsContinuityCharacterThrowsNumberFormatException() throws Throwable {
		// Undeclared exception!
		try {
			JpfStringUtil.isContinuityCharacter("6,{Ad=o<[n");
			fail("Expecting exception: NumberFormatException");

		} catch (NumberFormatException e) {
			//
			// For input string: \",\"
			//
		}
	}

	@Test(timeout = 1000)
	public void testIsContinuityCharacterReturningFalse() throws Throwable {
		boolean boolean0 = JpfStringUtil.isContinuityCharacter("2147483647");
		assertFalse(boolean0);
	}

	@Test(timeout = 1000)
	public void testToCapitalizeCamelCaseReturningNonEmptyString() throws Throwable {
		String string0 = JpfStringUtil.toCapitalizeCamelCase("%n@");
		assertEquals("%n@", string0);
		assertNotNull(string0);
	}

	@Test(timeout = 1000)
	public void testHexString2binaryStringReturningNonEmptyString() throws Throwable {
		String string0 = JpfStringUtil.hexString2binaryString(
				"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000174");
		assertNotNull(string0);
		assertEquals(
				
				string0);
	}

	@Test(timeout = 1000)
	public void testFillStringByArgsReturningNonEmptyString() throws Throwable {
		String[] stringArray0 = JpfStringUtil.split("dateFormat", "");
		assertNotNull(stringArray0);

		JpfStringUtil.fillStringByArgs(",wIL.Ul&X/", stringArray0);
		assertEquals(10, stringArray0.length);
	}

	@Test(timeout = 1000)
	public void testRemovePrefixWithNull() throws Throwable {
		String string0 = JpfStringUtil.removePrefix("XP%_", (String) null);
		assertEquals("XP%_", string0);
	}

	@Test(timeout = 1000)
	public void testHtmEncode3() throws Throwable {
		String string0 = JpfStringUtil.htmEncode("o%&[;GJS3>R'");
		assertEquals("o%&amp;[;GJS3&gt;R'", string0);
	}

	@Test(timeout = 1000)
	public void testDelRepeat0() throws Throwable {
		StringBuilder stringBuilder0 = new StringBuilder((CharSequence) ".");
		JpfStringUtil.delRepeat(stringBuilder0);
		assertEquals("0,.", stringBuilder0.toString());
	}

	@Test(timeout = 1000)
	public void testIsEmpty() throws Throwable {
		boolean boolean0 = JpfStringUtil.isEmpty("NaN");
		assertTrue(boolean0);
	}

	@Test(timeout = 1000)
	public void testCapitaliseThrowsNullPointerException() throws Throwable {
		// Undeclared exception!
		try {
			JpfStringUtil.capitalise((String) null);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testCapitaliseThrowsStringIndexOutOfBoundsException() throws Throwable {
		// Undeclared exception!
		try {
			JpfStringUtil.capitalise("");
			fail("Expecting exception: StringIndexOutOfBoundsException");

		} catch (StringIndexOutOfBoundsException e) {
		}
	}

	@Test(timeout = 1000)
	public void testDelRepeatThrowsNullPointerException() throws Throwable {
		// Undeclared exception!
		try {
			JpfStringUtil.delRepeat((StringBuilder) null);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testFillStringByArgsThrowsNullPointerException() throws Throwable {
		String[] stringArray0 = new String[8];
		// Undeclared exception!
		try {
			JpfStringUtil.fillStringByArgs((String) null, stringArray0);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testFirstToLowerCaseThrowsArrayIndexOutOfBoundsException() throws Throwable {
		// Undeclared exception!
		try {
			JpfStringUtil.firstToLowerCase("");
			fail("Expecting exception: ArrayIndexOutOfBoundsException");

		} catch (ArrayIndexOutOfBoundsException e) {
			//
			// 0
			//
		}
	}

	@Test(timeout = 1000)
	public void testFirstToLowerCaseThrowsNullPointerException() throws Throwable {
		// Undeclared exception!
		try {
			JpfStringUtil.firstToLowerCase((String) null);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testFirstToUpperCaseThrowsArrayIndexOutOfBoundsException() throws Throwable {
		// Undeclared exception!
		try {
			JpfStringUtil.firstToUpperCase("");
			fail("Expecting exception: ArrayIndexOutOfBoundsException");

		} catch (ArrayIndexOutOfBoundsException e) {
			//
			// 0
			//
		}
	}

	@Test(timeout = 1000)
	public void testFirstToUpperCaseThrowsNullPointerException() throws Throwable {
		// Undeclared exception!
		try {
			JpfStringUtil.firstToUpperCase((String) null);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testGetFirstPosStrThrowsNullPointerException() throws Throwable {
		// Undeclared exception!
		try {
			JpfStringUtil.getFirstPosStr("", (String) null);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testGetStringCountThrowsNullPointerException() throws Throwable {
		// Undeclared exception!
		try {
			JpfStringUtil.getStringCount((String) null);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testHtmlEncodeThrowsNullPointerException() throws Throwable {
		// Undeclared exception!
		try {
			JpfStringUtil.htmlEncode((String) null);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testIsChineseTakingStringThrowsNullPointerException() throws Throwable {
		// Undeclared exception!
		try {
			JpfStringUtil.isChinese((String) null);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testIsSameCharacterThrowsNullPointerException() throws Throwable {
		// Undeclared exception!
		try {
			JpfStringUtil.isSameCharacter((String) null);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testRemoveRepeatStringThrowsPatternSyntaxException() throws Throwable {
		// Undeclared exception!
		try {
			JpfStringUtil.removeRepeatString("(iE~^Kh|lDf(h=", "(iE~^Kh|lDf(h=");
			fail("Expecting exception: PatternSyntaxException");

		} catch (PatternSyntaxException e) {
			//
			// Unclosed group near index 15\r
			// (iE~^Kh|lDf(h=
			//
		}
	}

	@Test(timeout = 1000)
	public void testSeqNumLeftPadZeroThrowsTooManyResourcesException() throws Throwable {
		// Undeclared exception!
		JpfStringUtil.seqNumLeftPadZero(466L, 3327612);
	}

	@Test(timeout = 1000)
	public void testShowCharCodeThrowsNullPointerException() throws Throwable {
		// Undeclared exception!
		try {
			JpfStringUtil.showCharCode((byte[]) null);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
		}
	}

	@Test(timeout = 1000)
	public void testGetCNStringTaking2ArgumentsReturningNonEmptyString() throws Throwable {
		String string0 = JpfStringUtil.getCNString("g(@y2sEgrO[XP6C$g", "gb2312");
		assertEquals("g(@y2sEgrO[XP6C$g", string0);
	}

	@Test(timeout = 1000)
	public void testReplaceChinaStrReturningEmptyString() throws Throwable {
		String string0 = JpfStringUtil.replaceChinaStr((String) null, "(_]&OTG", "cIf9<?,(=$&");
		assertEquals("", string0);
	}

}
