/*
 * This file was automatically generated by         wupf
 * Thu Nov 28 11:56:48 GMT 2019
 */

package org.jpf.utils;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.lang.reflect.Array;
import java.time.Month;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;
import java.util.Stack;

import org.junit.Test;

public class JpfValidateUtil_WETest {

	@Test(timeout = 1000)
	public void testIsNotPositiveFloatThrowsNoClassDefFoundError() throws Throwable {
		boolean boolean0 = JpfValidateUtil.isNotPositiveFloat("juPE[(([eXWv-X-(v");
		assertTrue(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsNotEmailThrowsNoClassDefFoundError() throws Throwable {
		boolean boolean0 = JpfValidateUtil.isNotEmail("F1XD9((_OCV0BF");
		assertTrue(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsFloatThrowsNoClassDefFoundError() throws Throwable {
		boolean boolean0 = JpfValidateUtil.isFloat("");
		assertFalse(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsQqThrowsNoClassDefFoundError() throws Throwable {
		boolean boolean0 = JpfValidateUtil.isQq("=");
		assertFalse(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsIntOrFloatThrowsNoClassDefFoundError() throws Throwable {
		boolean boolean0 = JpfValidateUtil.isIntOrFloat("El");
		assertFalse(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsNotPhoneThrowsNoClassDefFoundError() throws Throwable {
		boolean boolean0 = JpfValidateUtil.isNotPhone((String) null);
		assertTrue(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsLetterThrowsNoClassDefFoundError() throws Throwable {
		boolean boolean0 = JpfValidateUtil.isLetter("]4u!$P~las|-");
		assertFalse(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsArmyIdCardThrowsNoClassDefFoundError() throws Throwable {
		boolean boolean0 = JpfValidateUtil.isArmyIdCard((String) null);
		assertFalse(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsTimestampThrowsNoClassDefFoundError() throws Throwable {
		boolean boolean0 = JpfValidateUtil.isTimestamp("+i/3~g?&SG[g6");
		assertFalse(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsIdCardThrowsNoClassDefFoundError() throws Throwable {
		boolean boolean0 = JpfValidateUtil.isIdCard("eYRgdXQGe");
		assertFalse(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsNumberThrowsNoClassDefFoundError() throws Throwable {
		boolean boolean0 = JpfValidateUtil.isNumber((String) null);
		assertFalse(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsZipCodeThrowsNoClassDefFoundError() throws Throwable {
		boolean boolean0 = JpfValidateUtil.isZipCode((String) null);
		assertFalse(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsNotNegativeFloatThrowsNoClassDefFoundError() throws Throwable {
		boolean boolean0 = JpfValidateUtil.isNotNegativeFloat((String) null);
		assertTrue(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsDateThrowsNoClassDefFoundError() throws Throwable {
		boolean boolean0 = JpfValidateUtil.isDate(",~u");
		assertFalse(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsNumberLetterThrowsNoClassDefFoundError() throws Throwable {
		boolean boolean0 = JpfValidateUtil.isNumberLetter("WG|");
		assertFalse(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsPositiveIntegerThrowsNoClassDefFoundError() throws Throwable {
		boolean boolean0 = JpfValidateUtil.isPositiveInteger("");
		assertFalse(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsUserNameThrowsNoClassDefFoundError() throws Throwable {
		boolean boolean0 = JpfValidateUtil.isUserName("2KFZCI9t$/0TwUWG<");
		assertFalse(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsChineseThrowsNoClassDefFoundError() throws Throwable {
		boolean boolean0 = JpfValidateUtil.isChinese("#^a;A*PLS{*A+");
		assertFalse(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsDomainThrowsNoClassDefFoundError() throws Throwable {
		JpfValidateUtil.isDomain("(<~]Z[h79&Mx\"e)lc");
	}

	@Test(timeout = 1000)
	public void testIsUrlThrowsNoClassDefFoundError() throws Throwable {
		boolean boolean0 = JpfValidateUtil.isUrl((String) null);
		assertFalse(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsPasswordThrowsNoClassDefFoundError() throws Throwable {
		boolean boolean0 = JpfValidateUtil
				.isPassword("^(?=^.{3,255}$)[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+$");
		assertFalse(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsNonnegativeIntegerThrowsNoClassDefFoundError() throws Throwable {
		boolean boolean0 = JpfValidateUtil.isNonnegativeInteger("");
		assertFalse(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsValidTakingStringArrayReturningFalse() throws Throwable {
		String[] stringArray0 = new String[9];
		boolean boolean0 = JpfValidateUtil.isValid(stringArray0);
		assertFalse(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsValidTakingStringWithEmptyString() throws Throwable {
		boolean boolean0 = JpfValidateUtil.isValid("");
		assertFalse(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsValidTakingStringArrayReturningTrue() throws Throwable {
		String[] stringArray0 = new String[1];
		stringArray0[0] = "uQ<";
		boolean boolean0 = JpfValidateUtil.isValid(stringArray0);
		assertTrue(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsValidTakingObjectReturningFalse() throws Throwable {
		boolean boolean0 = JpfValidateUtil.isValid((Object) null);
		assertFalse(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsValidTakingObjectReturningTrue() throws Throwable {
		boolean boolean0 = JpfValidateUtil.isValid((Object) "");
		assertTrue(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsValidTakingObjectArrayWithNull() throws Throwable {
		boolean boolean0 = JpfValidateUtil.isValid((Object[]) null);
		assertFalse(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsValidTakingObjectArrayWithEmptyArray() throws Throwable {
		Object[] objectArray0 = new Object[0];
		boolean boolean0 = JpfValidateUtil.isValid(objectArray0);
		assertFalse(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsValidTakingObjectArrayReturningTrue() throws Throwable {
		Object[] objectArray0 = new Object[5];
		boolean boolean0 = JpfValidateUtil.isValid(objectArray0);
		assertTrue(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsValidTakingCollectionWithNull() throws Throwable {
		boolean boolean0 = JpfValidateUtil.isValid((Collection) null);
		assertFalse(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsValidTakingCollectionReturningTrue() throws Throwable {
		Stack<Month> stack0 = new Stack<Month>();
		Month month0 = Month.SEPTEMBER;
		stack0.add(month0);
		boolean boolean0 = JpfValidateUtil.isValid((Collection) stack0);
		assertTrue(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsValidTakingCollectionArrayReturningTrue() throws Throwable {
		Collection<Integer>[] collectionArray0 = (Collection<Integer>[]) Array.newInstance(Collection.class, 0);
		boolean boolean0 = JpfValidateUtil.isValid(collectionArray0);
		assertTrue(boolean0);
	}



	@Test(timeout = 1000)
	public void testIsValidTakingMapWithNull() throws Throwable {
		boolean boolean0 = JpfValidateUtil.isValid((Map) null);
		assertFalse(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsValidTakingMapArrayReturningFalse() throws Throwable {
		Map<Month, Object>[] mapArray0 = (Map<Month, Object>[]) Array.newInstance(Map.class, 2);
		HashMap<Month, Object> hashMap0 = new HashMap<Month, Object>();
		mapArray0[0] = (Map<Month, Object>) hashMap0;
		Set<Month> set0 = hashMap0.keySet();
		Month month0 = Month.JULY;
		hashMap0.put(month0, set0);
		boolean boolean0 = JpfValidateUtil.isValid(mapArray0);
		assertFalse(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsValidTakingMapArrayReturningTrue() throws Throwable {
		Map<Month, Object>[] mapArray0 = (Map<Month, Object>[]) Array.newInstance(Map.class, 2);
		HashMap<Month, Object> hashMap0 = new HashMap<Month, Object>();
		mapArray0[0] = (Map<Month, Object>) hashMap0;
		Set<Month> set0 = hashMap0.keySet();
		Month month0 = Month.JULY;
		hashMap0.put(month0, set0);
		mapArray0[1] = (Map<Month, Object>) hashMap0;
		boolean boolean0 = JpfValidateUtil.isValid(mapArray0);
		assertTrue(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsNegativeFloatThrowsNoClassDefFoundError() throws Throwable {
		boolean boolean0 = JpfValidateUtil.isNegativeFloat("^[\u4E00-\u9FA5]{0,}$");
		assertFalse(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsEmailThrowsNoClassDefFoundError() throws Throwable {
		boolean boolean0 = JpfValidateUtil.isEmail("org.apache.commons.io.IOCase");
		assertFalse(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsPhoneThrowsNoClassDefFoundError() throws Throwable {
		boolean boolean0 = JpfValidateUtil.isPhone((String) null);
		assertFalse(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsPositiveFloatThrowsNoClassDefFoundError() throws Throwable {
		boolean boolean0 = JpfValidateUtil.isPositiveFloat("");
		assertFalse(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsValidTakingStringReturningTrue() throws Throwable {
		boolean boolean0 = JpfValidateUtil.isValid(
				"([0-9a-f]+):([0-9a-f]+):([0-9a-f]+):([0-9a-f]+):([0-9a-f]+):([0-9a-f]+):([0-9a-f]+):([0-9a-f]+)");
		assertTrue(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsValidTakingStringWithNull() throws Throwable {
		boolean boolean0 = JpfValidateUtil.isValid((String) null);
		assertFalse(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsValidTakingCollectionReturningFalse() throws Throwable {
		LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
		boolean boolean0 = JpfValidateUtil.isValid((Collection) linkedHashSet0);
		assertFalse(boolean0);
	}


	@Test(timeout = 1000)
	public void testIsValidTakingMapWithEmptyMap() throws Throwable {
		Map<Month, Object>[] mapArray0 = (Map<Month, Object>[]) Array.newInstance(Map.class, 2);
		HashMap<Month, Object> hashMap0 = new HashMap<Month, Object>();
		mapArray0[1] = (Map<Month, Object>) hashMap0;
		boolean boolean0 = JpfValidateUtil.isValid(mapArray0[1]);
		assertFalse(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsContainsForbiddenCharacterThrowsNoClassDefFoundError() throws Throwable {
		boolean boolean0 = JpfValidateUtil.isContainsForbiddenCharacter("");
		assertFalse(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsIPThrowsNoClassDefFoundError() throws Throwable {
		boolean boolean0 = JpfValidateUtil.isIP(
				"^((d{2}(([02468][048])|([13579][26]))[-s]?((((0?[13578])|(1[02]))[-s]?((0?[1-9])|([1-2][0-9])|(3[01])))|(((0?[469])|(11))[-s]?((0?[1-9])|([1-2][0-9])|(30)))|(0?2[-s]?((0?[1-9])|([1-2][0-9])))))|(d{2}(([02468][1235679])|([13579][01345789]))[-s]?((((0?[13578])|(1[02]))[-s]?((0?[1-9])|([1-2][0-9])|(3[01])))|(((0?[469])|(11))[-s]?((0?[1-9])|([1-2][0-9])|(30)))|(0?2[-s]?((0?[1-9])|(1[0-9])|(2[0-8])))))) ([2][0-3]|[0-1][0-9]|[1-9]):[0-5][0-9]:([0-5][0-9]|[6][0])$");
		assertFalse(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsNotArmyIdCardThrowsNoClassDefFoundError() throws Throwable {
		boolean boolean0 = JpfValidateUtil.isNotArmyIdCard(
				"([0-9a-f]+):([0-9a-f]+):([0-9a-f]+):([0-9a-f]+):([0-9a-f]+):([0-9a-f]+):([0-9a-f]+):([0-9a-f]+)");
		assertTrue(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsNotChineseThrowsNoClassDefFoundError() throws Throwable {
		boolean boolean0 = JpfValidateUtil.isNotChinese("log4j2.flowMessageFactory");
		assertTrue(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsNotDateThrowsNoClassDefFoundError() throws Throwable {
		boolean boolean0 = JpfValidateUtil.isNotDate("/T=");
		assertTrue(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsNotDomainThrowsNoClassDefFoundError() throws Throwable {
		JpfValidateUtil.isNotDomain("vs5^((VSo");
	}

	@Test(timeout = 1000)
	public void testIsNotFloatThrowsNoClassDefFoundError() throws Throwable {
		boolean boolean0 = JpfValidateUtil.isNotFloat("");
		assertTrue(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsNotIPThrowsNoClassDefFoundError() throws Throwable {
		boolean boolean0 = JpfValidateUtil.isNotIP("");
		assertTrue(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsNotIdCardThrowsNoClassDefFoundError() throws Throwable {
		boolean boolean0 = JpfValidateUtil.isNotIdCard((String) null);
		assertTrue(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsNotIntOrFloatThrowsNoClassDefFoundError() throws Throwable {
		boolean boolean0 = JpfValidateUtil.isNotIntOrFloat("/[1-9][0-9]{4,}/");
		assertTrue(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsNotNumberThrowsNoClassDefFoundError() throws Throwable {
		boolean boolean0 = JpfValidateUtil.isNotNumber("SjPb-Wwh#x");
		assertTrue(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsNotNumberLetterThrowsNoClassDefFoundError() throws Throwable {
		boolean boolean0 = JpfValidateUtil.isNotNumberLetter("17}!E;:l9NLdF");
		assertTrue(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsNotTelephoneThrowsNoClassDefFoundError() throws Throwable {
		boolean boolean0 = JpfValidateUtil.isNotTelephone(">^zL");
		assertTrue(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsNotTimestampThrowsNoClassDefFoundError() throws Throwable {
		boolean boolean0 = JpfValidateUtil.isNotTimestamp("");
		assertTrue(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsNotUrlThrowsNoClassDefFoundError() throws Throwable {
		boolean boolean0 = JpfValidateUtil.isNotUrl("C>GC,@#0t|Rodhak`");
		assertTrue(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsNotUuidThrowsNoClassDefFoundError() throws Throwable {
		boolean boolean0 = JpfValidateUtil.isNotUuid("");
		assertTrue(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsTelephoneThrowsNoClassDefFoundError() throws Throwable {
		boolean boolean0 = JpfValidateUtil.isTelephone("");
		assertFalse(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsUuidThrowsNoClassDefFoundError() throws Throwable {
		boolean boolean0 = JpfValidateUtil.isUuid("yjk\"WdU<*FBz1HW(");
		assertFalse(boolean0);
	}

	@Test(timeout = 1000)
	public void testIsValidTakingStringArrayThrowsNullPointerException() throws Throwable {
		// Undeclared exception!
		try {
			JpfValidateUtil.isValid((String[]) null);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testIsValidTakingCollectionArrayThrowsNullPointerException() throws Throwable {
		// Undeclared exception!
		try {
			JpfValidateUtil.isValid((Collection[]) null);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testIsValidTakingMapArrayThrowsNullPointerException() throws Throwable {
		// Undeclared exception!
		try {
			JpfValidateUtil.isValid((Map[]) null);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testValidateThrowsNoClassDefFoundError() throws Throwable {
		boolean boolean0 = JpfValidateUtil.validate("vF", "&UvLhppGBiquU~!");
		assertFalse(boolean0);
	}
}
