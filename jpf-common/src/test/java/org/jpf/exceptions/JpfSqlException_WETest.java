/*
 * This file was automatically generated by wupf@
 * Thu May 07 03:29:11 GMT 2020
 */

package org.jpf.exceptions;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.fail;

import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLTransactionRollbackException;

import org.junit.Test;

import com.alibaba.fastjson.JSON;


public class JpfSqlException_WETest {


	/**
	* Run the jpfSqlException method test.
	*
	* @throws Exception
	* 
	* @generatedBy wupf 
	* @2020-05-07 10:23:31
	* @see public   jpfSqlException(String errMsg)   
	*/
	@Test(timeout = 3000)
	public void testjpfSqlException_0() throws Exception {

		String cc_errMsg = "abc123";
		JpfSqlException wupf_result = new JpfSqlException(cc_errMsg);

		assertNotNull(wupf_result);

	}
	
	@Test(timeout = 1000)
	public void testGetErrCodeReturningZero() throws Throwable {
		JpfSqlException jpfException0 = new JpfSqlException(
				"\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000");
		int int0 = jpfException0.getErrCode();
		assertEquals(0, int0);
	}

	@Test(timeout = 1000)
	public void testHandleSqlExWithSQLExceptionWhereGetErrorCodeIsPositive() throws Throwable {
		JpfSqlException jpfException0 = new JpfSqlException();
		SQLDataException sQLDataException0 = new SQLDataException("", "", 942);
		jpfException0.HandleSqlEx(sQLDataException0);
		assertEquals(10942, jpfException0.getErrCode());
	}

	@Test(timeout = 1000)
	public void testCreatesJpfExceptionTakingString() throws Throwable {
		JpfSqlException jpfException0 = new JpfSqlException(
				"\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000");
		SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(
				"\u2002\u3000\r\u0085\u200A\u2005\u2000\u3000\u2029\u000B\u3000\u2008\u2003\u205F\u3000\u1680\t \u2006\u2001\u202F\u00A0\f\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000",
				"", 904);
		jpfException0.HandleSqlEx(sQLTransactionRollbackException0);
		assertEquals(10904, jpfException0.getErrCode());
	}

	@Test(timeout = 1000)
	public void testGetErrCodeReturningNegative() throws Throwable {
		JpfSqlException jpfException0 = new JpfSqlException((-318));
		int int0 = jpfException0.getErrCode();
		assertEquals((-318), int0);
	}

	@Test(timeout = 1000)
	public void testGetErrMsgReturningEmptyString() throws Throwable {
		JpfSqlException jpfException0 = new JpfSqlException();
		String string0 = jpfException0.getErrMsg();
		assertEquals("", string0);
	}

	@Test(timeout = 1000)
	public void testToString() throws Throwable {
		JpfSqlException jpfException0 = new JpfSqlException();
		String string0 = jpfException0.toString();
		assertNotEquals("org.jpf.aut.runtime.mock.java.lang.MockThrowable: ", string0);
	}



	@Test(timeout = 1000)
	public void testHandleSqlExThrowsNullPointerException() throws Throwable {
		JpfSqlException jpfException0 = new JpfSqlException("");
		// Undeclared exception!
		try {
			jpfException0.HandleSqlEx((SQLException) null);
			fail("Expecting exception: NullPointerException");

		} catch (NullPointerException e) {
			//
			// no message in exception (getMessage() returned null)
			//
		}
	}

	@Test(timeout = 1000)
	public void testCreatesJpfExceptionTakingInt() throws Throwable {
		JpfSqlException jpfException0 = new JpfSqlException((-1));
		int int0 = jpfException0.getErrCode();
		assertEquals((-1), int0);
	}

	@Test(timeout = 1000)
	public void testGetErrMsgReturningNonEmptyString() throws Throwable {
		JpfSqlException jpfException0 = new JpfSqlException(0, "com.google.common.base.CharMatcher$JavaLetterOrDigit");
		String string0 = jpfException0.getErrMsg();
		assertEquals("com.google.common.base.CharMatcher$JavaLetterOrDigit", string0);
	}

	@Test(timeout = 1000)
	public void testGetErrMsgReturningNull() throws Throwable {
		JpfSqlException jpfException0 = new JpfSqlException((String) null);
		String string0 = jpfException0.getErrMsg();
		assertNull(string0);
	}

	/**
	* Run the jpfException method test.
	*
	* @throws Exception
	* 
	* @generatedBy wupf 
	* @2019-11-28 19:01:01
	* @see public   jpfException(String errMsg)   
	*/
	@Test(timeout = 1000)
	public void testjpfException_0() throws Exception {

		String cc_errMsg = "abc123";
		JpfSqlException wupf_result = new JpfSqlException(cc_errMsg);

		assertNotNull(wupf_result);

	}

	/**
	* Run the jpfException method test.
	*
	* @throws Exception
	* 
	* @generatedBy wupf 
	* @2019-11-28 19:01:01
	* @see public   jpfException(String errMsg)   
	*/
	@Test(timeout = 1000)
	public void testjpfException_1() throws Exception {

		String cc_errMsg = null;
		JpfSqlException wupf_result = new JpfSqlException(cc_errMsg);

		assertNotNull(wupf_result);

	}

	/**
	* Run the jpfException method test.
	*
	* @throws Exception
	* 
	* @generatedBy wupf 
	* @2019-11-28 19:01:01
	* @see public   jpfException(String errMsg)   
	*/
	@Test(timeout = 1000)
	public void testjpfException_2() throws Exception {

		String cc_errMsg = "";
		JpfSqlException wupf_result = new JpfSqlException(cc_errMsg);

		assertNotNull(wupf_result);

	}

	/**
	* Run the jpfException method test.
	*
	* @throws Exception
	* 
	* @generatedBy wupf 
	* @2019-11-28 19:01:01
	* @see public   jpfException(int errCode)   
	*/
	@Test(timeout = 1000)
	public void testjpfException_3() throws Exception {

		int cc_errCode = Integer.MAX_VALUE;
		JpfSqlException wupf_result = new JpfSqlException(cc_errCode);

		assertNotNull(wupf_result);

	}

	/**
	* Run the jpfException method test.
	*
	* @throws Exception
	* 
	* @generatedBy wupf 
	* @2019-11-28 19:01:01
	* @see public   jpfException(int errCode)   
	*/
	@Test(timeout = 1000)
	public void testjpfException_4() throws Exception {

		int cc_errCode = Integer.MIN_VALUE;
		JpfSqlException wupf_result = new JpfSqlException(cc_errCode);

		assertNotNull(wupf_result);

	}

	/**
	* Run the jpfException method test.
	*
	* @throws Exception
	* 
	* @generatedBy wupf 
	* @2019-11-28 19:01:01
	* @see public   jpfException(int errCode)   
	*/
	@Test(timeout = 1000)
	public void testjpfException_5() throws Exception {

		int cc_errCode = 0;
		JpfSqlException wupf_result = new JpfSqlException(cc_errCode);

		assertNotNull(wupf_result);

	}

	/**
	* Run the jpfException method test.
	*
	* @throws Exception
	* 
	* @generatedBy wupf 
	* @2019-11-28 19:01:01
	* @see public   jpfException(int errCode,String errMsg)   
	*/
	@Test(timeout = 1000)
	public void testjpfException_6() throws Exception {

		int cc_errCode = Integer.MAX_VALUE;
		String cc_errMsg = "abc123";
		JpfSqlException wupf_result = new JpfSqlException(cc_errCode, cc_errMsg);

		assertNotNull(wupf_result);

	}

	/**
	* Run the jpfException method test.
	*
	* @throws Exception
	* 
	* @generatedBy wupf 
	* @2019-11-28 19:01:01
	* @see public   jpfException(int errCode,String errMsg)   
	*/
	@Test(timeout = 1000)
	public void testjpfException_7() throws Exception {

		int cc_errCode = Integer.MAX_VALUE;
		String cc_errMsg = null;
		JpfSqlException wupf_result = new JpfSqlException(cc_errCode, cc_errMsg);

		assertNotNull(wupf_result);

	}

	/**
	* Run the jpfException method test.
	*
	* @throws Exception
	* 
	* @generatedBy wupf 
	* @2019-11-28 19:01:01
	* @see public   jpfException(int errCode,String errMsg)   
	*/
	@Test(timeout = 1000)
	public void testjpfException_8() throws Exception {

		int cc_errCode = Integer.MAX_VALUE;
		String cc_errMsg = "";
		JpfSqlException wupf_result = new JpfSqlException(cc_errCode, cc_errMsg);

		assertNotNull(wupf_result);

	}

	/**
	* Run the jpfException method test.
	*
	* @throws Exception
	* 
	* @generatedBy wupf 
	* @2019-11-28 19:01:01
	* @see public   jpfException(int errCode,String errMsg)   
	*/
	@Test(timeout = 1000)
	public void testjpfException_9() throws Exception {

		int cc_errCode = Integer.MAX_VALUE;
		String cc_errMsg = "123";
		JpfSqlException wupf_result = new JpfSqlException(cc_errCode, cc_errMsg);

		assertNotNull(wupf_result);

	}

	/**
	* Run the jpfException method test.
	*
	* @throws Exception
	* 
	* @generatedBy wupf 
	* @2019-11-28 19:01:01
	* @see public   jpfException(int errCode,String errMsg)   
	*/
	@Test(timeout = 1000)
	public void testjpfException_10() throws Exception {

		int cc_errCode = Integer.MAX_VALUE;
		String cc_errMsg = "涓枃";
		JpfSqlException wupf_result = new JpfSqlException(cc_errCode, cc_errMsg);

		assertNotNull(wupf_result);

	}

	/**
	* Run the jpfException method test.
	*
	* @throws Exception
	* 
	* @generatedBy wupf 
	* @2019-11-28 19:01:01
	* @see public   jpfException(int errCode,String errMsg)   
	*/
	@Test(timeout = 1000)
	public void testjpfException_11() throws Exception {

		int cc_errCode = Integer.MAX_VALUE;
		String cc_errMsg = "涓枃123abc";
		JpfSqlException wupf_result = new JpfSqlException(cc_errCode, cc_errMsg);

		assertNotNull(wupf_result);

	}

	/**
	* Run the HandleSqlEx method test.
	*
	* @throws Exception
	* 
	* @generatedBy wupf 
	* @2019-11-28 19:01:01
	* @see public  void HandleSqlEx(SQLException ex)   
	*/
	@Test(timeout = 1000)
	public void test_HandleSqlEx_R13() throws Throwable {

		SQLException ex = new SQLException();

		int cc_errCode = 0;
		JpfSqlException wupf_fixture = new JpfSqlException(cc_errCode);

		wupf_fixture.HandleSqlEx(ex);

		// add check point here, sample: assertEquals(true, wupf_result);

	}

	/**
	* Run the getErrCode method test.
	*
	* @throws Exception
	* 
	* @generatedBy wupf 
	* @2019-11-28 19:01:01
	* @see public  int getErrCode()   
	*/
	@Test(timeout = 1000)
	public void test_getErrCode_NP14() throws Throwable {

		int cc_errCode = 0;
		JpfSqlException wupf_fixture = new JpfSqlException(cc_errCode);

		int wupf_result = wupf_fixture.getErrCode();

		System.out.println("jpf_check:getErrCode:" + JSON.toJSONString(wupf_result));
		assertNotNull(JSON.toJSONString(wupf_result));

	}

	/**
	* Run the getErrMsg method test.
	*
	* @throws Exception
	* 
	* @generatedBy wupf 
	* @2019-11-28 19:01:01
	* @see public  String getErrMsg()   
	*/
	@Test(timeout = 1000)
	public void test_getErrMsg_NP15() throws Throwable {

		int cc_errCode = 0;
		JpfSqlException wupf_fixture = new JpfSqlException(cc_errCode);

		String wupf_result = wupf_fixture.getErrMsg();

		System.out.println("jpf_check:getErrMsg:" + JSON.toJSONString(wupf_result));
		assertNotNull(JSON.toJSONString(wupf_result));

	}

	/**
	* Run the toString method test.
	*
	* @throws Exception
	* 
	* @generatedBy wupf 
	* @2019-11-28 19:01:01
	* @see public  String toString()   
	*/
	@Test(timeout = 1000)
	public void test_toString_NP16() throws Throwable {

		int cc_errCode = 0;
		JpfSqlException wupf_fixture = new JpfSqlException(cc_errCode);

		String wupf_result = wupf_fixture.toString();

		System.out.println("jpf_check:toString:" + JSON.toJSONString(wupf_result));
		assertNotNull(JSON.toJSONString(wupf_result));

	}
}
